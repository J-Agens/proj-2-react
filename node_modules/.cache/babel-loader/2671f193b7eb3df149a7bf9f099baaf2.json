{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/propject/project-1-mohamedctm/src/components/rem/author.tsx\";\nimport React from 'react';\nimport { authorRe } from '../../api/LibraryClient';\nimport { Review } from './view1';\nimport { Err1, ErrS } from '../../errors/error1';\nexport class Authored extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      authorr: [],\n      isError: false,\n      errorMessage: '',\n      userid: this.props.userid\n    };\n  }\n\n  async componentDidMount() {\n    this.setState({\n      authorr: await authorRe(isFinite(this.props.userid) ? this.props.userid : 100),\n      isError: false\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.userid !== nextState.userid;\n  }\n\n  async UNSAFE_componentWillReceiveProps() {\n    try {\n      this.setState({\n        authorr: await authorRe(isFinite(this.props.userid) ? this.props.userid : 100),\n        isError: false\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        authorr: '',\n        isError: true,\n        errorMessage: e.message\n      }); // }\n    }\n  }\n\n  render() {\n    const data = this.state.authorr;\n\n    if (typeof data === \"string\") {\n      return /*#__PURE__*/React.createElement(ErrS, {\n        data: data,\n        err: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 20\n        }\n      });\n    }\n\n    if (this.state.isError) {\n      return /*#__PURE__*/React.createElement(Err1, {\n        err: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 16\n        }\n      });\n    } else {\n      return data.map((u, x) => {\n        return /*#__PURE__*/React.createElement(Review, {\n          key: x,\n          thekey: x,\n          id: u.reimbursementId,\n          author: u.author,\n          amount: u.amount,\n          resolver: u.resolver,\n          status: u.status,\n          type: u.type,\n          description: u.description,\n          date1: u.dateSubmitted,\n          date2: u.dateResolved,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 6\n          }\n        });\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/propject/project-1-mohamedctm/src/components/rem/author.tsx"],"names":["React","authorRe","Review","Err1","ErrS","Authored","Component","constructor","props","clearError","setState","isError","errorMessage","state","authorr","userid","componentDidMount","isFinite","shouldComponentUpdate","nextProps","nextState","UNSAFE_componentWillReceiveProps","e","message","render","data","map","u","x","reimbursementId","author","amount","resolver","status","type","description","dateSubmitted","dateResolved"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { authorRe } from '../../api/LibraryClient';\nimport { Reimbursement } from '../../models/Reimbursement';\nimport {Review} from './view1';\nimport { Err1, ErrS } from '../../errors/error1';\n\n\ninterface IBooksDisplayState {\n  authorr: Reimbursement[]|any;\n  isError: boolean;\n  errorMessage: string;\n  userid:number;\n}\n\nexport class Authored extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      authorr: [],\n      isError: false,\n      errorMessage: '',\n      userid: this.props.userid,\n    }\n  }\n\n  async componentDidMount() {\n    this.setState({\n    authorr: await authorRe(isFinite(this.props.userid)?this.props.userid : 100),\n          isError: false\n        })\n      }\n\n  shouldComponentUpdate(nextProps: any, nextState: any) {\n    return this.props.userid !== nextState.userid;\n  }\n\n \n\n  async UNSAFE_componentWillReceiveProps() {\n    try {\n\n      this.setState({\n        authorr: await authorRe(isFinite(this.props.userid)?this.props.userid : 100),\n        isError: false\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        authorr: '',\n        isError: true,\n        errorMessage: e.message,\n      })\n    // }\n  }\n  }\n\n\n  \n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n\n\n  render() {\n\n    const data = this.state.authorr;\n    if(typeof(data) === \"string\"){ \n            return <ErrS data={data} err={this.state.errorMessage} />\n    }\n\n    if(this.state.isError){\n        return <Err1 err={this.state.errorMessage} />\n    }else{\n        return (data.map((u:Reimbursement|any,x:number) =>{\n            return(\n     <Review key={x} thekey={x} id={u.reimbursementId} author={u.author} amount={u.amount}\n      resolver={u.resolver} status={u.status} type={u.type} description={u.description}\n       date1={u.dateSubmitted} date2={u.dateResolved} />\n                )      \n                })\n        )\n    }\n    \n  }\n  \n}"]},"metadata":{},"sourceType":"module"}