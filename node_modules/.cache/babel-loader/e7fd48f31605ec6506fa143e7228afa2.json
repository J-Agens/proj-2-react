{"ast":null,"code":"import axios from 'axios';\nimport { User } from '../models/User';\nimport { Reimbursement } from '../models/Reimbursement';\nimport { FailedLoginError } from '../errors/FailedLoginError';\nconst libraryClient = axios.create({\n  baseURL: 'http://100.25.132.252:3000',\n  withCredentials: true\n}); //@adam : Library-express is running on my EC2 with public IP 18.232.125.207\n\nexport async function getAllUsers() {\n  const response = await libraryClient.get('/users'); // return response.data;\n\n  console.log(response.data);\n  return response.data.map(userObj => {\n    const {\n      id,\n      username,\n      password,\n      firstname,\n      lastname,\n      email,\n      role\n    } = userObj;\n    return new User(id, username, password, firstname, lastname, email, role);\n  });\n}\nexport async function destroy() {\n  const response = await libraryClient.get('/logout'); // return response.data;\n\n  console.log(response.data);\n}\nexport async function Allreimbursements() {\n  const response = await libraryClient.get('/reimbursements'); // return response.data;\n\n  console.log(response.data);\n  return response.data.map(userObj => {\n    const {\n      reimbursementId,\n      author,\n      amount,\n      dateSubmitted,\n      dateResolved,\n      description,\n      resolver,\n      status,\n      type\n    } = userObj;\n    return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type);\n  });\n}\nexport async function createNew(a, b, c, d) {\n  const response = await libraryClient.post(`/reimbursements`, {\n    id: a,\n    amount: b,\n    description: c,\n    type: d\n  });\n  return response.data;\n}\nexport async function updatexx(a, b, c, d, e, f, g) {\n  const response = await libraryClient.patch(`/users`, {\n    username: !!a ? a : null,\n    password: !!b ? b : null,\n    firstname: !!c ? c : null,\n    lastname: !!d ? d : null,\n    email: !!e ? e : null,\n    roleId: !!f ? f : null,\n    userId: g\n  });\n  return response.data;\n}\nexport async function authorRe(id) {\n  const response = await libraryClient.get(`/author/userid/:userId${id}`);\n  console.log(response.data); //return response.data;\n\n  return response.data;\n}\nexport async function getSingle(id) {\n  const response = await libraryClient.get(`/users/${id}`);\n  console.log(response.data); //return response.data;\n\n  return response.data;\n}\nexport async function login(un, pw) {\n  try {\n    const response = await libraryClient.post('/login', {\n      username: un,\n      password: pw\n    });\n    const {\n      id,\n      username,\n      password,\n      firstname,\n      lastname,\n      email,\n      role\n    } = response.data;\n    return new User(id, username, password, firstname, lastname, email, role);\n  } catch (e) {\n    if (e.response.status === 401 || e.response.status === 400) {\n      throw new FailedLoginError('Failed to authenticate', un);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw e;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/api/LibraryClient.tsx"],"names":["axios","User","Reimbursement","FailedLoginError","libraryClient","create","baseURL","withCredentials","getAllUsers","response","get","console","log","data","map","userObj","id","username","password","firstname","lastname","email","role","destroy","Allreimbursements","reimbursementId","author","amount","dateSubmitted","dateResolved","description","resolver","status","type","createNew","a","b","c","d","post","updatexx","e","f","g","patch","roleId","userId","authorRe","getSingle","login","un","pw"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { User } from '../models/User';\nimport { Reimbursement } from '../models/Reimbursement';\n\nimport { FailedLoginError } from '../errors/FailedLoginError';\n\n\nconst libraryClient = axios.create({\n  baseURL: 'http://100.25.132.252:3000',\n  withCredentials: true,\n});\n\n//@adam : Library-express is running on my EC2 with public IP 18.232.125.207\n\n\nexport async function getAllUsers() : Promise<User[] | any> {\n  const response = await libraryClient.get('/users');\n  // return response.data;\n  console.log(response.data);\n  return response.data.map((userObj: any) => {\n    const {id, username, password, firstname, lastname, email, role} = userObj;\n    return new User(id, username, password, firstname, lastname,email, role);\n  });\n}\n\nexport async function destroy() : Promise<any> {\n  const response = await libraryClient.get('/logout');\n  // return response.data;\n  console.log(response.data);\n}\n\nexport async function Allreimbursements() : Promise<Reimbursement[] | any> {\n  const response = await libraryClient.get('/reimbursements');\n  // return response.data;\n  console.log(response.data);\n  return response.data.map((userObj: any) => {\n    const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n    return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  });\n}\n\n\n\n\nexport async function createNew(a:number,b:number,c:string, d:number) : Promise<Reimbursement[] | any> {\n\n  const response = await libraryClient.post(`/reimbursements`,{id:a,amount:b,description:c,type:d});\n  return response.data;\n}\n\nexport async function updatexx(a:any,b:any,c:any,d:any,e:any,f:any, g:number) : Promise<User[] | any> {\n\n  const response = await libraryClient.patch(`/users`,{username:!!(a)?a:null,password:!!(b)?b:null,firstname:!!(c)?c:null,lastname:!!(d)?d:null,email:!!(e)?e:null,roleId:!!(f)?f:null, userId:g});\n  return response.data;\n}\n\nexport async function authorRe(id:number) : Promise<Reimbursement[] | any> {\n  const response = await libraryClient.get(`/author/userid/:userId${id}`);\n  console.log(response.data);\n  //return response.data;\n  return response.data;\n}\n\nexport async function getSingle(id:number) : Promise<User[] | any> {\n  const response = await libraryClient.get(`/users/${id}`);\n  console.log(response.data);\n  //return response.data;\n  return response.data;\n}\n\nexport async function login(un: string, pw: string): Promise<User> {\n  try {\n    const response = await libraryClient.post('/login', {username: un, password: pw});\n    const {id, username, password,firstname,lastname, email, role} = response.data;\n    return new User(id, username, password, firstname,lastname, email, role);\n  } catch (e) {\n    if(e.response.status === 401 ||e.response.status === 400) {\n      throw new FailedLoginError('Failed to authenticate', un);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw e;\n    }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module"}