{"ast":null,"code":"import axios from 'axios';\nimport { Reimbursement } from '../models/Reimbursement';\nimport { Writer } from '../models/Writer';\nimport { FailedLoginError } from '../errors/FailedLoginError';\nconst libraryClient = axios.create({\n  baseURL: 'http://54.174.125.219:3001/',\n  withCredentials: true\n}); //@adam : Library-express is running on my EC2 with public IP 18.232.125.207\n\nexport async function getAllWriters() {\n  const response = await libraryClient.get('/users'); // return response.data;\n\n  console.log(response.data);\n  return response.data; // return response.data.map((userObj: any) => {\n  //   const {id, username, password, firstname, lastname, email, role} = userObj;\n  //   return new Writer(id, username, password, firstname, lastname,email, role);\n  // });\n}\nexport async function destroy() {\n  const response = await libraryClient.get('/logout'); // return response.data;\n\n  console.log(response.data);\n}\nexport async function Allreimbursements() {\n  const response = await libraryClient.get('/reimbursements'); // return response.data;\n\n  console.log(response.data);\n  return response.data.map(userObj => {\n    const {\n      reimbursementId,\n      author,\n      amount,\n      dateSubmitted,\n      dateResolved,\n      description,\n      resolver,\n      status,\n      type\n    } = userObj;\n    return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type);\n  });\n}\nexport async function createNew(a, b, c, d) {\n  const response = await libraryClient.post(`/reimbursements`, {\n    id: a,\n    amount: b,\n    description: c,\n    type: d\n  });\n  return response.data;\n}\nexport async function updatexx(a, b, c, d, e, f, g) {\n  const response = await libraryClient.patch(`/users`, {\n    username: !!a ? a : null,\n    password: !!b ? b : null,\n    firstname: !!c ? c : null,\n    lastname: !!d ? d : null,\n    email: !!e ? e : null,\n    roleId: !!f ? f : null,\n    userId: g\n  });\n  return response.data;\n}\nexport async function authorRe(id) {\n  const response = await libraryClient.get(`reimbursements/author/userid/${!!id ? id : 1}`);\n  console.log(response.data);\n  return response.data; // return response.data.map((userObj: any) => {\n  //   const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n  //   return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  // });\n}\nexport async function patching(a, b, c, d, e, f) {\n  const response = await libraryClient.patch(`reimbursements/`, {\n    reimbursementid: !!a ? a : null,\n    resolver: !!b ? b : null,\n    amount: !!c ? c : null,\n    description: !!d ? d : null,\n    status: !!e ? e : null,\n    type: !!f ? f : null\n  });\n  console.log(response.data);\n  return response.data; // return response.data.map((userObj: any) => {\n  //   const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n  //   return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  // });\n}\nexport async function sta(id) {\n  const response = await libraryClient.get(`reimbursements/status/${id}`);\n  console.log(response.data);\n  return response.data.map(userObj => {\n    const {\n      reimbursementId,\n      author,\n      amount,\n      dateSubmitted,\n      dateResolved,\n      description,\n      resolver,\n      status,\n      type\n    } = userObj;\n    return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type);\n  });\n}\nexport async function getSingle(id) {\n  const response = await libraryClient.get(`/users/${id}`);\n  console.log(response.data);\n  return response.data;\n}\nexport async function login(un, pw) {\n  try {\n    const response = await libraryClient.post('/login', {\n      username: un,\n      password: pw\n    });\n    const {\n      writerid,\n      username,\n      password,\n      firstname,\n      lastname,\n      email,\n      phone,\n      permission\n    } = response.data;\n    return new Writer(writerid, username, password, firstname, lastname, email, phone, permission);\n  } catch (e) {\n    if (e.response.status === 401 || e.response.status === 405 || e.response.status === 403) {\n      throw new FailedLoginError('Failed to authenticate', un);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw new FailedLoginError('something else', un);\n      ;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/Shadow/Desktop/project-2-react/src/api/LibraryClient.tsx"],"names":["axios","Reimbursement","Writer","FailedLoginError","libraryClient","create","baseURL","withCredentials","getAllWriters","response","get","console","log","data","destroy","Allreimbursements","map","userObj","reimbursementId","author","amount","dateSubmitted","dateResolved","description","resolver","status","type","createNew","a","b","c","d","post","id","updatexx","e","f","g","patch","username","password","firstname","lastname","email","roleId","userId","authorRe","patching","reimbursementid","sta","getSingle","login","un","pw","writerid","phone","permission"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { Reimbursement } from '../models/Reimbursement';\nimport { Writer } from '../models/Writer';\n\nimport { FailedLoginError } from '../errors/FailedLoginError';\n\n\nconst libraryClient = axios.create({\n  baseURL: 'http://54.174.125.219:3001/',\n  withCredentials: true,\n});\n\n//@adam : Library-express is running on my EC2 with public IP 18.232.125.207\n\n\nexport async function getAllWriters() : Promise<Writer[] | any> {\n  const response = await libraryClient.get('/users');\n  // return response.data;\n  console.log(response.data);\n  return response.data;\n  // return response.data.map((userObj: any) => {\n  //   const {id, username, password, firstname, lastname, email, role} = userObj;\n  //   return new Writer(id, username, password, firstname, lastname,email, role);\n  // });\n}\n\nexport async function destroy() : Promise<any> {\n  const response = await libraryClient.get('/logout');\n  // return response.data;\n  console.log(response.data);\n}\n\nexport async function Allreimbursements() : Promise<Reimbursement[] | any> {\n  const response = await libraryClient.get('/reimbursements');\n  // return response.data;\n  console.log(response.data);\n  return response.data.map((userObj: any) => {\n    const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n    return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  });\n}\n\n\n\n\nexport async function createNew(a:number,b:number,c:string, d:number) : Promise<Reimbursement[] | any> {\n\n  const response = await libraryClient.post(`/reimbursements`,{id:a,amount:b,description:c,type:d});\n  return response.data;\n}\n\nexport async function updatexx(a:any,b:any,c:any,d:any,e:any,f:any, g:number) : Promise<Writer[] | any> {\n\n  const response = await libraryClient.patch(`/users`,{username:!!(a)?a:null,password:!!(b)?b:null,firstname:!!(c)?c:null,lastname:!!(d)?d:null,email:!!(e)?e:null,roleId:!!(f)?f:null, userId:g});\n  return response.data;\n}\n\nexport async function authorRe(id:number) : Promise<Reimbursement[] | any> {\n  const response = await libraryClient.get(`reimbursements/author/userid/${!!(id)?id:1}`);\n  console.log(response.data);\n  return response.data;\n  // return response.data.map((userObj: any) => {\n  //   const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n  //   return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  // });\n}\n\nexport async function patching(a:any,b:any,c:any,d:any,e:any,f:any) : Promise<Reimbursement[] | any> {\n  const response = await libraryClient.patch(`reimbursements/`,{reimbursementid:!!(a)?a:null,resolver:!!(b)?b:null,amount:!!(c)?c:null,description:!!(d)?d:null,status:!!(e)?e:null,type:!!(f)?f:null});\n  console.log(response.data);\n  return response.data;\n  // return response.data.map((userObj: any) => {\n  //   const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n  //   return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  // });\n}\n\nexport async function sta(id:number) : Promise<Reimbursement[] | any> {\n  const response = await libraryClient.get(`reimbursements/status/${id}`);\n  console.log(response.data);\n  return response.data.map((userObj: any) => {\n    const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n    return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  });\n}\n\nexport async function getSingle(id:number) : Promise<Writer[] | any> {\n  const response = await libraryClient.get(`/users/${id}`);\n  console.log(response.data);\n  return response.data;\n}\n\nexport async function login(un: string, pw: string): Promise<Writer> {\n  try {\n    const response = await libraryClient.post('/login', {username: un, password: pw});\n    const {writerid, username, password,firstname,lastname, email, phone, permission} = response.data;\n    return new Writer(writerid, username, password, firstname,lastname, email, phone, permission);\n  } catch (e) {\n    if(e.response.status === 401 ||e.response.status === 405 ||e.response.status === 403) {\n      throw new FailedLoginError('Failed to authenticate', un);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw new FailedLoginError('something else', un);;\n    }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module"}