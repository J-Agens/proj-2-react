{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/react1/myapp/src/components/bystatus.tsx\";\nimport React from 'react';\nimport { sta } from '../api/LibraryClient';\nexport class Stat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      single: 'fetching reimbursements by status-- choose a status and hit Fetch',\n      isError: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentWillReceiveProps() {\n    try {\n      const getit = await sta(this.props.userid);\n\n      if (getit) {\n        this.setState({\n          single: getit,\n          isError: false\n        });\n      }\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        single: '',\n        isError: true,\n        errorMessage: e.message\n      }); // }\n    }\n  }\n\n  render() {\n    const data = this.state.single;\n    console.log(typeof data);\n\n    if (typeof data === \"string\") {\n      switch (this.state.errorMessage) {\n        case \"Request failed with status code 400\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 23\n            }\n          }, \"Must include numeric value\");\n\n        case \"Request failed with status code 401\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 24\n            }\n          }, \"Finance manager role is required!\");\n\n        case \"Request failed with status code 405\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 24\n            }\n          }, \"No Reimbursement/s found\");\n\n        default:\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 23\n            }\n          }, JSON.stringify(data));\n      }\n    }\n\n    if (this.state.isError) {\n      switch (this.state.errorMessage) {\n        case \"Request failed with status code 402\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 19\n            }\n          }, \"login required\");\n\n        case \"Request failed with status code 403\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 20\n            }\n          }, \"Finance manager role is required!\");\n\n        case \"Request failed with status code 400\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 20\n            }\n          }, \"Provide a numeric id only!\");\n\n        default:\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 14\n            }\n          }, this.state.errorMessage, \" \");\n      }\n    } else {\n      return data.map(u => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: u.reimbursementId,\n          className: \"col\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 1\n          }\n        }, \"id  \", /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }\n        }, u.reimbursementId)), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 1\n          }\n        }, \"author  \", /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }\n        }, u.author)), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 1\n          }\n        }, \"amount  \", /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }\n        }, u.amount)), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 1\n          }\n        }, \"description \", /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 19\n          }\n        }, u.description)), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 1\n          }\n        }, \"status \", /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 14\n          }\n        }, u.status)), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 1\n          }\n        }, \"type \", /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 12\n          }\n        }, u.type)), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 1\n          }\n        }, \"date submitted \", /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 22\n          }\n        }, u.dateSubmitted)), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 1\n          }\n        }, \"date resolved\", /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 20\n          }\n        }, \" \", u.dateResolved)));\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/components/bystatus.tsx"],"names":["React","sta","Stat","Component","constructor","props","clearError","setState","isError","errorMessage","state","single","componentWillReceiveProps","getit","userid","e","message","render","data","console","log","JSON","stringify","map","u","reimbursementId","author","amount","description","status","type","dateSubmitted","dateResolved"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { sta } from '../api/LibraryClient';\nimport { Reimbursement } from '../models/Reimbursement';\n\n\ninterface IBooksDisplayState {\n  single: any;\n  isError: boolean;\n  errorMessage: string;\n}\n\nexport class Stat extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      single: 'fetching reimbursements by status-- choose a status and hit Fetch',\n      isError: false,\n      errorMessage: '',\n    }\n  }\n\n  async componentWillReceiveProps() {\n    try {\n      const getit = await sta(this.props.userid);\n      if(getit){\n      this.setState({\n        single: getit ,\n        isError: false\n      })\n    }\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        single: '',\n        isError: true,\n        errorMessage: e.message,\n      })\n    // }\n  }\n  }\n\n  \n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n\n\n  render() {\n\n    const data = this.state.single;\n    console.log(typeof(data));\n    if(typeof(data) === \"string\"){ \n        switch(this.state.errorMessage){\n            case \"Request failed with status code 400\":\n               return <h3>Must include numeric value</h3>\n            case \"Request failed with status code 401\":\n               return  <h3>Finance manager role is required!</h3>\n               case \"Request failed with status code 405\":\n               return  <h3>No Reimbursement/s found</h3>\n            default :\n               return <h3>{JSON.stringify(data)}</h3>\n        }\n\n    }\n\n    if(this.state.isError){\n      switch(this.state.errorMessage){\n        case \"Request failed with status code 402\":\n           return <h3>login required</h3>\n        case \"Request failed with status code 403\":\n           return  <h3>Finance manager role is required!</h3>\n           case \"Request failed with status code 400\":\n           return  <h3>Provide a numeric id only!</h3>\n        default :\n      return <h3>{this.state.errorMessage} </h3>\n      }\n    }else{\n\n        return (data.map((u:Reimbursement|any) =>{\n            return(\n     <div key={u.reimbursementId} className=\"col\">\n<span>id  <span>{u.reimbursementId}</span></span>  \n<span>author  <span>{u.author}</span></span>  \n<span>amount  <span>{u.amount}</span></span>  \n<span>description <span>{u.description}</span></span>  \n<span>status <span>{u.status}</span></span>  \n<span>type <span>{u.type}</span></span>  \n<span>date submitted <span>{u.dateSubmitted}</span></span> \n<span>date resolved<span> {u.dateResolved}</span></span> \n</div>\n\n)      \n})\n\n        )\n  }\n    \n  }\n  \n}"]},"metadata":{},"sourceType":"module"}