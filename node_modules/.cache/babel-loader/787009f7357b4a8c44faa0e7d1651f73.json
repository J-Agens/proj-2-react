{"ast":null,"code":"import axios from 'axios';\nimport { User } from '../models/User';\nimport { FailedLoginError } from '../errors/FailedLoginError';\nconst libraryClient = axios.create({\n  // baseURL: 'http://54.174.125.219:3001/',\n  baseURL: 'http://localhost:5000/',\n  withCredentials: true\n});\n/**************/\n\nexport async function posts(id) {\n  const response = await libraryClient.get(`/posts/author/${id}`);\n  console.log('All posts');\n  return response.data;\n}\nexport async function getPostById(id) {\n  const response = await libraryClient.get(`/posts/${id}`);\n  console.log('All posts');\n  return response.data;\n}\nexport async function myInfo(id) {\n  const response = await libraryClient.get(`/writers/${id}`);\n  console.log('getting user information'); // return response.data;\n\n  const {\n    writerid,\n    username,\n    password,\n    firstname,\n    lastname,\n    email,\n    phone,\n    permission\n  } = response.data;\n  return new User(writerid, username, password, firstname, lastname, email, phone, permission);\n}\nexport async function createPost(a, b, c, d, e, f, g, h, i, j, k, l) {\n  const response = await libraryClient.post(`/posts`, {\n    author: a,\n    postTitle: b,\n    postDescription: c,\n    postText: d,\n    dateSubmitted: e,\n    datePublished: f,\n    postType: g,\n    postField: h,\n    keyWords: i,\n    status: j,\n    resolver: k,\n    published: l\n  });\n  console.log('getting user information');\n  return response.data;\n}\nexport async function updatePost(id, a, b, c, d, e, f, g, h, i, j, k, l) {\n  const response = await libraryClient.put(`/posts/${id}`, {\n    postid: id,\n    author: a,\n    postTitle: b,\n    postDescription: c,\n    postText: d,\n    dateSubmitted: e,\n    datePublished: f,\n    postType: g,\n    postField: h,\n    keyWords: i,\n    status: j,\n    resolver: k,\n    published: l\n  });\n  console.log('getting user information');\n  return response.data;\n}\nexport async function updateSelf(writerid, username, password, firsname, lastname, email, phone, permission) {\n  const response = await libraryClient.put(`/writers/${writerid}`, {\n    writerid: writerid,\n    username: username,\n    password: password,\n    firstname: firsname,\n    lastname: lastname,\n    email: email,\n    phone: phone,\n    permission: permission\n  });\n  console.log('updating self- information');\n  return response.data;\n}\nexport async function madeUser(writerid, username, password, firsname, lastname, email, phone, permission) {\n  const response = await libraryClient.post(`/writers`, {\n    writerid: writerid,\n    username: username,\n    password: password,\n    firstname: firsname,\n    lastname: lastname,\n    email: email,\n    phone: phone,\n    permission: permission\n  });\n  console.log('updating self- information');\n  return response.data;\n}\n/**************/\n\nexport async function getAllUsers() {\n  const response = await libraryClient.get('/writers');\n  console.log(response.data);\n  return response.data;\n}\nexport async function getOneUsers(id) {\n  const response = await libraryClient.get(`/writers/${id}`);\n  console.log(response.data);\n  return response.data;\n}\nexport async function deleteUser(id) {\n  const response = await libraryClient.delete(`/writers/${id}`);\n  console.log(response.data);\n  return \"user deleted!\";\n}\nexport async function destroy() {\n  const response = await libraryClient.get('/logout'); // return response.data;\n\n  console.log(response.data);\n}\nexport async function updatexx(a, b, c, d, e, f, g) {\n  const response = await libraryClient.patch(`/users`, {\n    username: !!a ? a : null,\n    password: !!b ? b : null,\n    firstname: !!c ? c : null,\n    lastname: !!d ? d : null,\n    email: !!e ? e : null,\n    roleId: !!f ? f : null,\n    userId: g\n  });\n  return response.data;\n}\nexport async function getSingle(id) {\n  const response = await libraryClient.get(`/users/${id}`);\n  console.log(response.data);\n  return response.data;\n}\nexport async function login(un, pw) {\n  try {\n    const response = await libraryClient.post('/login', {\n      username: un,\n      password: pw\n    });\n    const {\n      writerid,\n      username,\n      password,\n      firstname,\n      lastname,\n      email,\n      phone,\n      permission\n    } = response.data;\n    return new User(writerid, username, password, firstname, lastname, email, phone, permission);\n  } catch (e) {\n    if (e.response.status === 401 || e.response.status === 400) {\n      throw new FailedLoginError('Failed to authenticate', un);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw e;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/Shadow/Desktop/project-2-react/src/api/LibraryClient.tsx"],"names":["axios","User","FailedLoginError","libraryClient","create","baseURL","withCredentials","posts","id","response","get","console","log","data","getPostById","myInfo","writerid","username","password","firstname","lastname","email","phone","permission","createPost","a","b","c","d","e","f","g","h","i","j","k","l","post","author","postTitle","postDescription","postText","dateSubmitted","datePublished","postType","postField","keyWords","status","resolver","published","updatePost","put","postid","updateSelf","firsname","madeUser","getAllUsers","getOneUsers","deleteUser","delete","destroy","updatexx","patch","roleId","userId","getSingle","login","un","pw"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { User } from '../models/User';\n\nimport { FailedLoginError } from '../errors/FailedLoginError';\nimport { Post } from '../models/Post';\n\n\nconst libraryClient = axios.create({\n  // baseURL: 'http://54.174.125.219:3001/',\n  baseURL: 'http://localhost:5000/',\n  withCredentials: true,\n});\n/**************/\nexport async function posts(id:number) : Promise<User[] | any> {\n  const response = await libraryClient.get(`/posts/author/${id}`);\n  console.log('All posts');\n  return response.data;\n}\n\nexport async function getPostById(id:number) : Promise<User[] | any> {\n  const response = await libraryClient.get(`/posts/${id}`);\n  console.log('All posts');\n  return response.data;\n}\n\nexport async function myInfo(id:number) : Promise<User[] | any> {\n  const response = await libraryClient.get(`/writers/${id}`);\n  console.log('getting user information');\n  // return response.data;\n  const {writerid, username, password,firstname,lastname, email, phone, permission} = response.data;\n    return new User(writerid, username, password, firstname,lastname, email, phone,permission);\n}\n\nexport async function createPost(a:number,b:string,c:string,d:string,e:any,f:any,g:string,h:string,\n  i:string,j:string,k:number,l:number) : Promise<Post[] | any> {\n  const response = await libraryClient.post(`/posts`,\n\t{\n    author:a,\npostTitle:b,\n\tpostDescription : c,\n  postText : d,\n  dateSubmitted:e,\n  datePublished:f,\n  postType:g,\n\tpostField : h,\n\tkeyWords : i,\n\t\tstatus : j,\n\tresolver : k,\n\tpublished : l});\n  console.log('getting user information');\n  return response.data;\n}\nexport async function updatePost(id:number,a:number,b:string,c:string,d:string,e:any,f:any,g:string,h:string,\n  i:string,j:string,k:number,l:number) : Promise<Post[] | any> {\n  const response = await libraryClient.put(`/posts/${id}`,\n\t{\n    postid: id,\n    author:a,\npostTitle:b,\n\tpostDescription : c,\n  postText : d,\n  dateSubmitted:e,\n  datePublished:f,\n  postType:g,\n\tpostField : h,\n\tkeyWords : i,\n\t\tstatus : j,\n\tresolver : k,\n\tpublished : l});\n  console.log('getting user information');\n  return response.data;\n}\n\nexport async function updateSelf(writerid:number,username:string,password:string,firsname:string,lastname:string,email:string,phone:string,permission:number) : Promise<Post[] | any> {\n  const response = await libraryClient.put(`/writers/${writerid}`,\n\t{\n    writerid: writerid,\n    username:username,\npassword:password,\n\tfirstname : firsname,\n  lastname : lastname,\n  email:email,\n  phone:phone,\n  permission:permission,\n});\n  console.log('updating self- information');\n  return response.data;\n}\n\nexport async function madeUser(writerid:number,username:string,password:string,firsname:string,lastname:string,email:string,phone:string,permission:number) : Promise<Post[] | any> {\n  const response = await libraryClient.post(`/writers`,\n\t{\n    writerid: writerid,\n    username:username,\npassword:password,\n\tfirstname : firsname,\n  lastname : lastname,\n  email:email,\n  phone:phone,\n  permission:permission,\n});\n  console.log('updating self- information');\n  return response.data;\n}\n/**************/\n\nexport async function getAllUsers() : Promise<User[] | any> {\n  const response = await libraryClient.get('/writers');\n  console.log(response.data);\n  return response.data;\n}\n\nexport async function getOneUsers(id:number) : Promise<User[] | any> {\n  const response = await libraryClient.get(`/writers/${id}`);\n  console.log(response.data);\n  return response.data;\n}\nexport async function deleteUser(id:number) : Promise<User[] | any> {\n  const response = await libraryClient.delete(`/writers/${id}`);\n  console.log(response.data);\n  return \"user deleted!\";\n}\n\nexport async function destroy() : Promise<any> {\n  const response = await libraryClient.get('/logout');\n  // return response.data;\n  console.log(response.data);\n}\n\n\n\n\n\n\n\n\nexport async function updatexx(a:any,b:any,c:any,d:any,e:any,f:any, g:number) : Promise<User[] | any> {\n\n  const response = await libraryClient.patch(`/users`,{username:!!(a)?a:null,password:!!(b)?b:null,firstname:!!(c)?c:null,lastname:!!(d)?d:null,email:!!(e)?e:null,roleId:!!(f)?f:null, userId:g});\n  return response.data;\n}\n\n\n\n\nexport async function getSingle(id:number) : Promise<User[] | any> {\n  const response = await libraryClient.get(`/users/${id}`);\n  console.log(response.data);\n  return response.data;\n}\n\nexport async function login(un: string, pw: string): Promise<User> {\n  try {\n    const response = await libraryClient.post('/login', {username: un, password: pw});\n    const {writerid, username, password,firstname,lastname, email, phone, permission} = response.data;\n    return new User(writerid, username, password, firstname,lastname, email, phone,permission);\n  } catch (e) {\n    if(e.response.status === 401 ||e.response.status === 400) {\n      throw new FailedLoginError('Failed to authenticate', un);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw e;\n    }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module"}