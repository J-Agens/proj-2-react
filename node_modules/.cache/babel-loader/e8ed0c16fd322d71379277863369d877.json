{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/Desktop/project-2-react/src/components/emp/WritersAllx.tsx\";\nimport React from 'react';\nimport { getSingle } from '../../api/LibraryClient';\nimport { Eview } from './view'; // import { QuickTable } from './QuickTable';\n\nexport class AllWritersx extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await getSingle(this.props.getWriter)\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      members: null,\n      isError: false,\n      errorMessage: ''\n    });\n  }\n\n  render() {\n    if (!this.state.isError) {\n      //map to a string so quicktable can render this.\n      const u = this.state.members;\n      return /*#__PURE__*/React.createElement(Eview, {\n        id: u.id,\n        username: u.username,\n        pass: u.password,\n        firstname: u.firstname,\n        lastname: u.lastname,\n        email: u.email,\n        role: u.role,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 10\n        }\n      });\n    } else {\n      switch (this.state.errorMessage) {\n        case \"Request failed with status code 402\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 21\n            }\n          }, \"login required\");\n\n        case \"Request failed with status code 403\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 22\n            }\n          }, \"Finance manager role is required!\");\n\n        default:\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 21\n            }\n          }, \"unknown Error\");\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/Desktop/project-2-react/src/components/emp/WritersAllx.tsx"],"names":["React","getSingle","Eview","AllWritersx","Component","constructor","props","clearError","setState","isError","errorMessage","state","members","componentDidMount","getWriter","e","message","componentWillUnmount","render","u","id","username","password","firstname","lastname","email","role"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,KAAT,QAAsB,QAAtB,C,CACA;;AAQA,OAAO,MAAMC,WAAN,SAA0BH,KAAK,CAACI,SAAhC,CAAmE;AAExEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SAmCxBC,UAnCwB,GAmCX,MAAM;AACjB,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KAxCuB;;AAEtB,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXH,MAAAA,OAAO,EAAE,KAFE;AAGXC,MAAAA,YAAY,EAAE;AAHH,KAAb;AAKD;;AAED,QAAMG,iBAAN,GAA0B;AACxB,QAAI;AACF,WAAKL,QAAL,CAAc;AACZI,QAAAA,OAAO,EAAE,MAAMX,SAAS,CAAC,KAAKK,KAAL,CAAWQ,SAAZ;AADZ,OAAd;AAGD,KAJD,CAIE,OAAOC,CAAP,EAAU;AACV;AACA;AACA,WAAKP,QAAL,CAAc;AAEZC,QAAAA,OAAO,EAAE,IAFG;AAGZC,QAAAA,YAAY,EAAEK,CAAC,CAACC;AAHJ,OAAd;AAKD;AACF;;AACAC,EAAAA,oBAAoB,GAAG;AAEpB,SAAKT,QAAL,CAAc;AACZI,MAAAA,OAAO,EAAE,IADG;AAEZH,MAAAA,OAAO,EAAE,KAFG;AAGZC,MAAAA,YAAY,EAAE;AAHF,KAAd;AAKH;;AAWDQ,EAAAA,MAAM,GAAG;AACP,QAAG,CAAC,KAAKP,KAAL,CAAWF,OAAf,EAAwB;AACtB;AACA,YAAMU,CAAC,GAAG,KAAKR,KAAL,CAAWC,OAArB;AACA,0BACG,oBAAC,KAAD;AAAO,QAAA,EAAE,EAAEO,CAAC,CAACC,EAAb;AAAiB,QAAA,QAAQ,EAAED,CAAC,CAACE,QAA7B;AAAuC,QAAA,IAAI,EAAEF,CAAC,CAACG,QAA/C;AACC,QAAA,SAAS,EAAEH,CAAC,CAACI,SADd;AACyB,QAAA,QAAQ,EAAEJ,CAAC,CAACK,QADrC;AAEE,QAAA,KAAK,EAAEL,CAAC,CAACM,KAFX;AAEkB,QAAA,IAAI,EAAEN,CAAC,CAACO,IAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH;AAQD,KAXD,MAYC;AACC,cAAO,KAAKf,KAAL,CAAWD,YAAlB;AACI,aAAK,qCAAL;AACG,8BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;;AACH,aAAK,qCAAL;AACG,8BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAAR;;AACH;AACG,8BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AANP;AAQD;AAEF;;AApEuE","sourcesContent":["import React from 'react';\nimport { Writer } from '../../models/Writer';\nimport { getSingle } from '../../api/LibraryClient';\nimport { Eview } from './view';\n// import { QuickTable } from './QuickTable';\n\ninterface IBooksDisplayState {\n  members: Writer[]|any;\n  isError: boolean;\n  errorMessage: string;\n}\n\nexport class AllWritersx extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: '',\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await getSingle(this.props.getWriter)\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        \n        isError: true,\n        errorMessage: e.message,\n      })\n    }\n  }\n   componentWillUnmount() {\n\n      this.setState({\n        members: null,\n        isError: false,\n        errorMessage: '',\n      })\n  }\n\n  \n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n  render() {\n    if(!this.state.isError) {\n      //map to a string so quicktable can render this.\n      const u = this.state.members;\n      return (\n         <Eview id={u.id} username={u.username} pass={u.password}\n          firstname={u.firstname} lastname={u.lastname}\n           email={u.email} role={u.role} />\n\n      )\n         \n         \n    } \nelse {\n      switch(this.state.errorMessage){\n          case \"Request failed with status code 402\":\n             return <h3>login required</h3>\n          case \"Request failed with status code 403\":\n             return  <h3>Finance manager role is required!</h3>\n          default :\n             return <h3>unknown Error</h3>\n      }\n    }\n    \n  }\n  \n}"]},"metadata":{},"sourceType":"module"}