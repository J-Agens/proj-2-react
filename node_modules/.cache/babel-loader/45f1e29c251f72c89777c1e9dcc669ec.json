{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/react1/myapp/src/components/SingleUser.tsx\";\nexport class AllUsers extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await getAllUsers()\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message\n      });\n    }\n  }\n\n  render() {\n    const data = this.state.single;\n\n    if (this.state.isError) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: data.id,\n        className: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 1\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 1\n        }\n      }, \"userid:  \", data.id), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 1\n        }\n      }, \"username:  \", data.username), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 1\n        }\n      }, \"password:  \", data.password), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 1\n        }\n      }, \"firstname: \", data.firstname), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 1\n        }\n      }, \"lastname: \", data.lastname), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 1\n        }\n      }, \"email: \", data.email), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 1\n        }\n      }, \"role: \", data.role));\n    } else {\n      //map to a string so quicktable can render this. \n      switch (this.state.errorMessage) {\n        case \"Request failed with status code 402\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 13\n            }\n          }, \"login required\");\n\n        case \"Request failed with status code 403\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 14\n            }\n          }, \"Finance manager role is required!\");\n\n        default:\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 13\n            }\n          }, \"unknown \");\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/components/SingleUser.tsx"],"names":["AllUsers","React","Component","constructor","props","clearError","setState","isError","errorMessage","state","members","componentDidMount","getAllUsers","e","message","render","data","single","id","username","password","firstname","lastname","email","role"],"mappings":";AAOA,OAAO,MAAMA,QAAN,SAAuBC,KAAK,CAACC,SAA7B,CAAgE;AAErEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SA2BxBC,UA3BwB,GA2BX,MAAM;AACjB,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KAhCuB;;AAEtB,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXH,MAAAA,OAAO,EAAE,KAFE;AAGXC,MAAAA,YAAY,EAAE;AAHH,KAAb;AAKD;;AAED,QAAMG,iBAAN,GAA0B;AACxB,QAAI;AACF,WAAKL,QAAL,CAAc;AACZI,QAAAA,OAAO,EAAE,MAAME,WAAW;AADd,OAAd;AAGD,KAJD,CAIE,OAAOC,CAAP,EAAU;AACV;AACA;AACA,WAAKP,QAAL,CAAc;AAEZC,QAAAA,OAAO,EAAE,IAFG;AAGZC,QAAAA,YAAY,EAAEK,CAAC,CAACC;AAHJ,OAAd;AAKD;AACF;;AAWDC,EAAAA,MAAM,GAAG;AAEP,UAAMC,IAAI,GAAI,KAAKP,KAAL,CAAWQ,MAAzB;;AAEA,QAAG,KAAKR,KAAL,CAAWF,OAAd,EAAuB;AAErB,0BACN;AAAK,QAAA,GAAG,EAAES,IAAI,CAACE,EAAf;AAAmB,QAAA,SAAS,EAAC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgBF,IAAI,CAACE,EAArB,CADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkBF,IAAI,CAACG,QAAvB,CAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkBH,IAAI,CAACI,QAAvB,CAHA,eAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkBJ,IAAI,CAACK,SAAvB,CAJA,eAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAiBL,IAAI,CAACM,QAAtB,CALA,eAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAcN,IAAI,CAACO,KAAnB,CANA,eAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAaP,IAAI,CAACQ,IAAlB,CAPA,CADM;AAYD,KAdD,MAeC;AAEL;AACA,cAAO,KAAKf,KAAL,CAAWD,YAAlB;AACE,aAAK,qCAAL;AACG,8BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;;AACH,aAAK,qCAAL;AACG,8BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAAR;;AACH;AACG,8BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AANL;AASK;AAEF;;AArEoE","sourcesContent":["\ninterface IBooksDisplayState {\n  members: User[];\n  isError: boolean;\n  errorMessage: string;\n}\n\nexport class AllUsers extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: '',\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await getAllUsers()\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        \n        isError: true,\n        errorMessage: e.message,\n      })\n    }\n  }\n\n  \n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n  render() {\n\n    const data =  this.state.single;\n\n    if(this.state.isError) {\n\n      return(\n<div key={data.id} className=\"col\">\n<span>userid:  {data.id}</span>  \n<span>username:  {data.username}</span>  \n<span>password:  {data.password}</span>  \n<span>firstname: {data.firstname}</span>  \n<span>lastname: {data.lastname}</span>  \n<span>email: {data.email}</span>  \n<span>role: {data.role}</span>  \n</div>\n      )\n      \n    } \nelse {\n      \n//map to a string so quicktable can render this. \nswitch(this.state.errorMessage){\n  case \"Request failed with status code 402\":\n     return <h3>login required</h3>\n  case \"Request failed with status code 403\":\n     return  <h3>Finance manager role is required!</h3>\n  default :\n     return <h3>unknown </h3>\n}\n        \n    }\n    \n  }\n  \n}"]},"metadata":{},"sourceType":"module"}