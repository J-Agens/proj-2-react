{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/propject/project-1-mohamedctm/src/components/rem/RemAllx.tsx\";\nimport React from 'react';\nimport { authorRe } from '../../api/LibraryClient';\nimport { Review } from './view1';\nimport { Err1 } from '../../errors/error1'; // import { QuickTable } from './QuickTable';\n\nexport class Allx extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await authorRe()\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.isError) {\n      //map to a string so quicktable can render this.\n      return this.state.members.map(u => {\n        return /*#__PURE__*/React.createElement(Review, {\n          current: this.props.current,\n          id: u.reimbursementId,\n          author: u.author,\n          amount: u.amount,\n          resolver: u.resolver,\n          status: u.status,\n          type: u.type,\n          description: u.description,\n          date1: u.dateSubmitted,\n          date2: u.dateResolved,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 7\n          }\n        });\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(Err1, {\n        err: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 12\n        }\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/propject/project-1-mohamedctm/src/components/rem/RemAllx.tsx"],"names":["React","authorRe","Review","Err1","Allx","Component","constructor","props","clearError","setState","isError","errorMessage","state","members","componentDidMount","e","message","render","map","u","current","reimbursementId","author","amount","resolver","status","type","description","dateSubmitted","dateResolved"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,MAAT,QAAuB,SAAvB;AACA,SAASC,IAAT,QAAqB,qBAArB,C,CACA;;AAQA,OAAO,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAA4D;AAEjEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SA2BxBC,UA3BwB,GA2BX,MAAM;AACjB,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KAhCuB;;AAEtB,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXH,MAAAA,OAAO,EAAE,KAFE;AAGXC,MAAAA,YAAY,EAAE;AAHH,KAAb;AAKD;;AAED,QAAMG,iBAAN,GAA0B;AACxB,QAAI;AACF,WAAKL,QAAL,CAAc;AACZI,QAAAA,OAAO,EAAE,MAAMZ,QAAQ;AADX,OAAd;AAGD,KAJD,CAIE,OAAOc,CAAP,EAAU;AACV;AACA;AACA,WAAKN,QAAL,CAAc;AAEZC,QAAAA,OAAO,EAAE,IAFG;AAGZC,QAAAA,YAAY,EAAEI,CAAC,CAACC;AAHJ,OAAd;AAKD;AACF;;AAWDC,EAAAA,MAAM,GAAG;AAEP,QAAG,CAAC,KAAKL,KAAL,CAAWF,OAAf,EAAwB;AACtB;AAEA,aAAO,KAAKE,KAAL,CAAWC,OAAX,CAAmBK,GAAnB,CAAwBC,CAAD,IAAmB;AAClD,4BACC,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWa,OAA5B;AAAqC,UAAA,EAAE,EAAED,CAAC,CAACE,eAA3C;AAA4D,UAAA,MAAM,EAAEF,CAAC,CAACG,MAAtE;AAA8E,UAAA,MAAM,EAAEH,CAAC,CAACI,MAAxF;AAAgG,UAAA,QAAQ,EAAEJ,CAAC,CAACK,QAA5G;AAAsH,UAAA,MAAM,EAAEL,CAAC,CAACM,MAAhI;AAAwI,UAAA,IAAI,EAAEN,CAAC,CAACO,IAAhJ;AAAsJ,UAAA,WAAW,EAAEP,CAAC,CAACQ,WAArK;AAAkL,UAAA,KAAK,EAAER,CAAC,CAACS,aAA3L;AAA0M,UAAA,KAAK,EAAET,CAAC,CAACU,YAAnN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAIK,OALG,CAAP;AAMD,KATD,MAUC;AACD,0BAAO,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAE,KAAKjB,KAAL,CAAWD,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAEC;AAEF;;AArDgE","sourcesContent":["import React from 'react';\nimport { Reimbursement } from '../../models/Reimbursement';\nimport { authorRe } from '../../api/LibraryClient';\nimport { Review } from './view1';\nimport { Err1 } from '../../errors/error1';\n// import { QuickTable } from './QuickTable';\n\ninterface IBooksDisplayState {\n  members: Reimbursement[];\n  isError: boolean;\n  errorMessage: string;\n}\n\nexport class Allx extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: '',\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await authorRe()\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        \n        isError: true,\n        errorMessage: e.message,\n      })\n    }\n  }\n\n  \n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n  render() {\n      \n    if(!this.state.isError) {\n      //map to a string so quicktable can render this.\n      \n      return this.state.members.map((u:Reimbursement)=>{\n     return(\n      <Review current={this.props.current} id={u.reimbursementId} author={u.author} amount={u.amount} resolver={u.resolver} status={u.status} type={u.type} description={u.description} date1={u.dateSubmitted} date2={u.dateResolved} />\n\n         )      \n         })\n    } \nelse { \n    return <Err1 err={this.state.errorMessage} />\n        \n    }\n    \n  }\n  \n}"]},"metadata":{},"sourceType":"module"}