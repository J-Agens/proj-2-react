{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/react1/myapp/src/components/NumberTableBuilder.tsx\";\nimport React from 'react';\nimport { QuickTable } from './QuickTable';\n\n/** \n * Includes a button and a QuickTable.  Appends rows to the QuickTable\n * When the button is clicked.\n */\nexport class NumberTableBuilder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addNumberRow = () => {\n      // We always want to use setState to modify state\n      this.setState({\n        // We want to keep our data immutable, so we don't modify tableRows in place\n        // instead we copy it, modify the copy, and set the copy as the state.\n        // this.state.tableRows.slice() is a copy of this.state.tableRows\n        // concat(Math.random()) adds a random number to the array\n        tableRows: this.state.tableRows.slice().concat(Math.random())\n      });\n    };\n\n    this.state = {\n      tableRows: []\n    };\n  }\n  /** Adds a number to the array tableRows */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(QuickTable, {\n      rows: this.state.tableRows,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.addNumberRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, \"Add Random Number\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/components/NumberTableBuilder.tsx"],"names":["React","QuickTable","NumberTableBuilder","Component","constructor","props","addNumberRow","setState","tableRows","state","slice","concat","Math","random","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,cAA3B;;AAMA;;;;AAIA,OAAO,MAAMC,kBAAN,SAAiCF,KAAK,CAACG,SAAvC,CAAgF;AAErFC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SAQxBC,YARwB,GAQT,MAAM;AACnB;AACA,WAAKC,QAAL,CAAc;AACZ;AACA;AACA;AACA;AACAC,QAAAA,SAAS,EAAG,KAAKC,KAAL,CAAWD,SAAX,CAAqBE,KAArB,GAA6BC,MAA7B,CAAoCC,IAAI,CAACC,MAAL,EAApC;AALA,OAAd;AAOD,KAjBuB;;AAEtB,SAAKJ,KAAL,GAAa;AACXD,MAAAA,SAAS,EAAE;AADA,KAAb;AAGD;AAED;;;AAYAM,EAAAA,MAAM,GAAG;AACP,wBACE,uDACE,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAE,KAAKL,KAAL,CAAWD,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAQ,MAAA,OAAO,EAAE,KAAKF,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,CADF;AAMD;;AA5BoF","sourcesContent":["import React from 'react';\nimport { QuickTable } from './QuickTable';\n\ninterface INumberTableBuilderState {\n  tableRows: number[];\n}\n\n/** \n * Includes a button and a QuickTable.  Appends rows to the QuickTable\n * When the button is clicked.\n */\nexport class NumberTableBuilder extends React.Component<any, INumberTableBuilderState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      tableRows: []\n    };\n  }\n\n  /** Adds a number to the array tableRows */\n  addNumberRow = () => {\n    // We always want to use setState to modify state\n    this.setState({\n      // We want to keep our data immutable, so we don't modify tableRows in place\n      // instead we copy it, modify the copy, and set the copy as the state.\n      // this.state.tableRows.slice() is a copy of this.state.tableRows\n      // concat(Math.random()) adds a random number to the array\n      tableRows : this.state.tableRows.slice().concat(Math.random())\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <QuickTable rows={this.state.tableRows} />\n        <button onClick={this.addNumberRow}>Add Random Number</button>\n      </>\n    )\n  }\n\n}"]},"metadata":{},"sourceType":"module"}