{"ast":null,"code":"import axios from 'axios';\nimport { User } from '../models/User';\nimport { Reimbursement } from '../models/Reimbursement';\nimport { FailedLoginError } from '../errors/FailedLoginError';\nconst libraryClient = axios.create({\n  baseURL: 'http://100.25.132.252:3000',\n  withCredentials: true\n}); //@adam : Library-express is running on my EC2 with public IP 18.232.125.207\n\nexport async function getAllUsers() {\n  const response = await libraryClient.get('/users'); // return response.data;\n\n  console.log(response.data);\n  return response.data.map(userObj => {\n    const {\n      id,\n      username,\n      password,\n      firstname,\n      lastname,\n      email,\n      role\n    } = userObj;\n    return new User(id, username, password, firstname, lastname, email, role);\n  });\n}\nexport async function Allreimbursements() {\n  const response = await libraryClient.get('/reimbursements'); // return response.data;\n\n  console.log(response.data);\n  return response.data.map(userObj => {\n    const {\n      reimbursementId,\n      author,\n      amount,\n      dateSubmitted,\n      dateResolved,\n      description,\n      resolver,\n      status,\n      type\n    } = userObj;\n    return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type);\n  });\n}\nexport async function getSingle(id) {\n  const response = await libraryClient.get(`/users/${id}`);\n  console.log(response.data); //return response.data;\n\n  return response.data;\n}\nexport async function login(un, pw) {\n  try {\n    const response = await libraryClient.post('/login', {\n      username: un,\n      password: pw\n    });\n    const {\n      id,\n      username,\n      password,\n      firstname,\n      lastname,\n      email,\n      role\n    } = response.data;\n    return new User(id, username, password, firstname, lastname, email, role);\n  } catch (e) {\n    if (e.response.status === 401 || e.response.status === 400) {\n      throw new FailedLoginError('Failed to authenticate', un);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw e;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/api/LibraryClient.tsx"],"names":["axios","User","Reimbursement","FailedLoginError","libraryClient","create","baseURL","withCredentials","getAllUsers","response","get","console","log","data","map","userObj","id","username","password","firstname","lastname","email","role","Allreimbursements","reimbursementId","author","amount","dateSubmitted","dateResolved","description","resolver","status","type","getSingle","login","un","pw","post","e"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { User } from '../models/User';\nimport { Reimbursement } from '../models/Reimbursement';\n\nimport { FailedLoginError } from '../errors/FailedLoginError';\n\n\nconst libraryClient = axios.create({\n  baseURL: 'http://100.25.132.252:3000',\n  withCredentials: true,\n});\n\n//@adam : Library-express is running on my EC2 with public IP 18.232.125.207\n\n\nexport async function getAllUsers() : Promise<User[] | any> {\n  const response = await libraryClient.get('/users');\n  // return response.data;\n  console.log(response.data);\n  return response.data.map((userObj: any) => {\n    const {id, username, password, firstname, lastname, email, role} = userObj;\n    return new User(id, username, password, firstname, lastname,email, role);\n  });\n}\n\nexport async function Allreimbursements() : Promise<Reimbursement[] | any> {\n  const response = await libraryClient.get('/reimbursements');\n  // return response.data;\n  console.log(response.data);\n  return response.data.map((userObj: any) => {\n    const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n    return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  });\n}\n\nexport async function getSingle(id:number) : Promise<User[] | any> {\n  const response = await libraryClient.get(`/users/${id}`);\n  console.log(response.data);\n  //return response.data;\n\n  return response.data;\n}\n\nexport async function login(un: string, pw: string): Promise<User> {\n  try {\n    const response = await libraryClient.post('/login', {username: un, password: pw});\n    const {id, username, password,firstname,lastname, email, role} = response.data;\n    return new User(id, username, password, firstname,lastname, email, role);\n  } catch (e) {\n    if(e.response.status === 401 ||e.response.status === 400) {\n      throw new FailedLoginError('Failed to authenticate', un);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw e;\n    }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module"}