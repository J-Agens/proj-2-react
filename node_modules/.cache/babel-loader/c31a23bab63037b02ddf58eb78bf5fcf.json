{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/propject/project-1-mohamedctm/src/components/emp/UsersAll.tsx\";\nimport React from 'react';\nimport { getAllUsers } from '../../api/LibraryClient';\nimport { Eview } from './view'; // import { QuickTable } from './QuickTable';\n\nexport class AllUsers extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await getAllUsers()\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    try {\n      this.setState({\n        members: null\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.isError) {\n      //map to a string so quicktable can render this.\n      return this.state.members.map(u => {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Eview, {\n          key: Math.floor(Math.random() * 3220 + 1),\n          id: u.id,\n          username: u.username,\n          pass: u.password,\n          firstname: u.firstname,\n          lastname: u.lastname,\n          email: u.email,\n          role: u.role,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 10\n          }\n        }));\n      });\n    } else {\n      switch (this.state.errorMessage) {\n        case \"Request failed with status code 402\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 21\n            }\n          }, \"login required\");\n\n        case \"Request failed with status code 403\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 22\n            }\n          }, \"Finance manager role is required!\");\n\n        default:\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 21\n            }\n          }, \"unknown Error\");\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/propject/project-1-mohamedctm/src/components/emp/UsersAll.tsx"],"names":["React","getAllUsers","Eview","AllUsers","Component","constructor","props","clearError","setState","isError","errorMessage","state","members","componentDidMount","e","message","componentWillUnmount","render","map","u","Math","floor","random","id","username","password","firstname","lastname","email","role"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,KAAT,QAAsB,QAAtB,C,CACA;;AAQA,OAAO,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAgE;AAErEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SA0CxBC,UA1CwB,GA0CX,MAAM;AACjB,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KA/CuB;;AAEtB,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXH,MAAAA,OAAO,EAAE,KAFE;AAGXC,MAAAA,YAAY,EAAE;AAHH,KAAb;AAKD;;AAED,QAAMG,iBAAN,GAA0B;AACxB,QAAI;AACF,WAAKL,QAAL,CAAc;AACZI,QAAAA,OAAO,EAAE,MAAMX,WAAW;AADd,OAAd;AAGD,KAJD,CAIE,OAAOa,CAAP,EAAU;AACV;AACA;AACA,WAAKN,QAAL,CAAc;AAEZC,QAAAA,OAAO,EAAE,IAFG;AAGZC,QAAAA,YAAY,EAAEI,CAAC,CAACC;AAHJ,OAAd;AAKD;AACF;;AACAC,EAAAA,oBAAoB,GAAG;AACtB,QAAI;AACF,WAAKR,QAAL,CAAc;AACZI,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD,KAJD,CAIE,OAAOE,CAAP,EAAU;AACV;AACA;AACA,WAAKN,QAAL,CAAc;AAEZC,QAAAA,OAAO,EAAE,KAFG;AAGZC,QAAAA,YAAY,EAAE;AAHF,OAAd;AAKD;AACF;;AAWDO,EAAAA,MAAM,GAAG;AACP,QAAG,CAAC,KAAKN,KAAL,CAAWF,OAAf,EAAwB;AACtB;AAEA,aAAQ,KAAKE,KAAL,CAAWC,OAAX,CAAmBM,GAAnB,CAAwBC,CAAD,IAAe;AAC/C,4BACI,uDACA,oBAAC,KAAD;AAAO,UAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgB,IAAjB,GAAyB,CAApC,CAAZ;AAAoD,UAAA,EAAE,EAAEH,CAAC,CAACI,EAA1D;AAA8D,UAAA,QAAQ,EAAEJ,CAAC,CAACK,QAA1E;AAAoF,UAAA,IAAI,EAAEL,CAAC,CAACM,QAA5F;AACC,UAAA,SAAS,EAAEN,CAAC,CAACO,SADd;AACyB,UAAA,QAAQ,EAAEP,CAAC,CAACQ,QADrC;AAEE,UAAA,KAAK,EAAER,CAAC,CAACS,KAFX;AAEkB,UAAA,IAAI,EAAET,CAAC,CAACU,IAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,CADJ;AAOK,OARI,CAAR;AAUD,KAbD,MAcC;AACC,cAAO,KAAKlB,KAAL,CAAWD,YAAlB;AACI,aAAK,qCAAL;AACG,8BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;;AACH,aAAK,qCAAL;AACG,8BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAAR;;AACH;AACG,8BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AANP;AAQD;AAEF;;AA7EoE","sourcesContent":["import React from 'react';\nimport { User } from '../../models/User';\nimport { getAllUsers } from '../../api/LibraryClient';\nimport { Eview } from './view';\n// import { QuickTable } from './QuickTable';\n\ninterface IBooksDisplayState {\n  members: User[]|any;\n  isError: boolean;\n  errorMessage: string;\n}\n\nexport class AllUsers extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: '',\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await getAllUsers()\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        \n        isError: true,\n        errorMessage: e.message,\n      })\n    }\n  }\n   componentWillUnmount() {\n    try {\n      this.setState({\n        members: null,\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        \n        isError: false,\n        errorMessage: '',\n      })\n    }\n  }\n\n  \n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n  render() {\n    if(!this.state.isError) {\n      //map to a string so quicktable can render this.\n      \n      return (this.state.members.map((u:User|any) =>{\n     return(\n         <>\n         <Eview key={Math.floor((Math.random() * 3220) + 1)} id={u.id} username={u.username} pass={u.password}\n          firstname={u.firstname} lastname={u.lastname}\n           email={u.email} role={u.role} />\n          </>\n         )      \n         })\n         )\n    } \nelse {\n      switch(this.state.errorMessage){\n          case \"Request failed with status code 402\":\n             return <h3>login required</h3>\n          case \"Request failed with status code 403\":\n             return  <h3>Finance manager role is required!</h3>\n          default :\n             return <h3>unknown Error</h3>\n      }\n    }\n    \n  }\n  \n}"]},"metadata":{},"sourceType":"module"}