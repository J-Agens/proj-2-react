{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/react1/myapp/src/components/SingleUser.tsx\";\nimport React from 'react';\nimport { getSingle } from '../api/LibraryClient'; // import { QuickTable } from './QuickTable';\n\nexport class SingleUser extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setUserId = i => {\n      this.setState({\n        userid: i.currentTarget.value\n      });\n    };\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      Onemembers: '',\n      isError: false,\n      errorMessage: '',\n      userid: 1\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        Onemembers: await getSingle(this.state.userid)\n      });\n    } catch (e) {\n      this.setState({\n        isError: true,\n        errorMessage: e.message\n      });\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // If this returns true, the component will update.  If false, the component won't.\n    // should update if we have different response from SWAPI, otherwise no.\n    return this.state.Onemembers !== nextState.Onemembers;\n  }\n\n  async componentDidUpdate() {\n    //This runs when the component updates on the actual DOM\n    this.setState({\n      Onemembers: await getSingle(this.state.userid)\n    });\n  }\n\n  render() {\n    const data = this.state.Onemembers;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.setUserId,\n      placeholder: \" please type user id\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.setUserId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, \"Next user\")), /*#__PURE__*/React.createElement(\"div\", {\n      key: data.id,\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }\n    }, \"userid:  \", data.id), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }\n    }, \"username:  \", data.username), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }\n    }, \"password:  \", data.password), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }\n    }, \"firstname: \", data.firstname), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }\n    }, \"lastname: \", data.lastname), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }\n    }, \"email: \", data.email), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }\n    }, \"role: \", data.role))); //     if(this.state.isError) {\n    //         switch(this.state.errorMessage){\n    //             case \"Request failed with status code 402\":\n    //                return <h3>login required</h3>\n    //             case \"Request failed with status code 403\":\n    //                return  <h3>Finance manager role is required!</h3>\n    //             default :\n    //                return <h3>unknown Error</h3>\n    //         }\n    //     } \n    // else {\n    //     const data =  this.state.Onemembers;\n    //     return (  \n    // <div key={data.id} className=\"col\">\n    // <span>userid:  {data.id}</span>  \n    // <span>username:  {data.username}</span>  \n    // <span>password:  {data.password}</span>  \n    // <span>firstname: {data.firstname}</span>  \n    // <span>lastname: {data.lastname}</span>  \n    // <span>email: {data.email}</span>  \n    // <span>role: {data.role}</span>  \n    // </div>\n    //     )   \n    // }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/components/SingleUser.tsx"],"names":["React","getSingle","SingleUser","Component","constructor","props","setUserId","i","setState","userid","currentTarget","value","clearError","isError","errorMessage","state","Onemembers","componentDidMount","e","message","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","render","data","id","username","password","firstname","lastname","email","role"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { User } from '../models/User';\nimport { getSingle } from '../api/LibraryClient';\n// import { QuickTable } from './QuickTable';\n\ninterface IBooksDisplayState {\n  Onemembers: User[]|any;\n  isError: boolean;\n  errorMessage: string;\n  userid : number\n}\n\nexport class SingleUser extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n        Onemembers: '',\n      isError: false,\n      errorMessage: '',\n      userid: 1\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        Onemembers: await getSingle(this.state.userid)\n      })\n    } catch (e) {\n\n      this.setState({\n        isError: true,\n        errorMessage: e.message,\n      })\n    }\n  }\n  shouldComponentUpdate(nextProps: any, nextState: any) {\n    // If this returns true, the component will update.  If false, the component won't.\n    // should update if we have different response from SWAPI, otherwise no.\n    return this.state.Onemembers !== nextState.Onemembers;\n  }\n\n  async componentDidUpdate() {\n    //This runs when the component updates on the actual DOM\n    this.setState({\n      Onemembers: await getSingle(this.state.userid)\n    });\n  }\n\n  setUserId = (i:any) => {\n    this.setState({\n      userid: i.currentTarget.value\n    })\n  }\n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n  render() {\n    const data =  this.state.Onemembers;\n    return (\n      <>\n      <form>\n        <input type=\"text\" onChange={this.setUserId} placeholder=\" please type user id\" />\n      <button onClick={this.setUserId}>Next user</button>\n      </form>\n      <div key={data.id} className=\"col\">\n    <span>userid:  {data.id}</span>  \n    <span>username:  {data.username}</span>  \n    <span>password:  {data.password}</span>  \n    <span>firstname: {data.firstname}</span>  \n    <span>lastname: {data.lastname}</span>  \n    <span>email: {data.email}</span>  \n    <span>role: {data.role}</span>  \n    </div>\n      \n      </>\n    );\n\n      \n//     if(this.state.isError) {\n//         switch(this.state.errorMessage){\n//             case \"Request failed with status code 402\":\n//                return <h3>login required</h3>\n//             case \"Request failed with status code 403\":\n//                return  <h3>Finance manager role is required!</h3>\n//             default :\n//                return <h3>unknown Error</h3>\n//         }\n//     } \n// else {\n//     const data =  this.state.Onemembers;\n//     return (  \n    // <div key={data.id} className=\"col\">\n    // <span>userid:  {data.id}</span>  \n    // <span>username:  {data.username}</span>  \n    // <span>password:  {data.password}</span>  \n    // <span>firstname: {data.firstname}</span>  \n    // <span>lastname: {data.lastname}</span>  \n    // <span>email: {data.email}</span>  \n    // <span>role: {data.role}</span>  \n    // </div>\n//     )   \n// }\n    \n  }\n  \n}"]},"metadata":{},"sourceType":"module"}