{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/react1/myapp/src/components/emp/SingleUser.tsx\";\nimport React from 'react';\nimport { getSingle } from '../../api/LibraryClient';\nimport { Err1, ErrS } from '../../errors/error1';\nimport { Eview } from './view';\nexport class SingleUser extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      single: 'fetching user by id',\n      isError: false,\n      errorMessage: '',\n      good: true\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        single: await getSingle(this.props.userid),\n        isError: false,\n        good: this.props.good\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message\n      }); // }\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.single !== nextState.single;\n  }\n\n  async componentDidUpdate() {\n    if (this.state.good) {\n      try {\n        this.setState({\n          single: await getSingle(this.props.userid),\n          isError: false,\n          good: this.props.good\n        });\n      } catch (e) {\n        // We set the error information in our state.\n        // This will let us render something about the error to the end user\n        this.setState({\n          isError: true,\n          errorMessage: e.message\n        }); // }\n      }\n    }\n  }\n\n  render() {\n    const u = this.state.single;\n\n    if (typeof u === \"string\") {\n      return /*#__PURE__*/React.createElement(ErrS, {\n        data: u,\n        err: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 14\n        }\n      });\n    }\n\n    if (this.state.isError) {\n      return /*#__PURE__*/React.createElement(Err1, {\n        err: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 10\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Eview, {\n        access: u.id,\n        id: u.id,\n        username: u.username,\n        pass: u.password,\n        firstname: u.firstname,\n        lastname: u.lastname,\n        email: u.email,\n        role: u.role,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 6\n        }\n      }));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/components/emp/SingleUser.tsx"],"names":["React","getSingle","Err1","ErrS","Eview","SingleUser","Component","constructor","props","clearError","setState","isError","errorMessage","state","single","good","componentDidMount","userid","e","message","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","render","u","id","username","password","firstname","lastname","email","role"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,qBAA3B;AACA,SAASC,KAAT,QAAsB,QAAtB;AAUA,OAAO,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAkE;AAEvEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SAsDxBC,UAtDwB,GAsDX,MAAM;AACjB,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KA3DuB;;AAEtB,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,qBADG;AAEXH,MAAAA,OAAO,EAAE,KAFE;AAGXC,MAAAA,YAAY,EAAE,EAHH;AAIXG,MAAAA,IAAI,EAAE;AAJK,KAAb;AAMD;;AAED,QAAMC,iBAAN,GAA0B;AACxB,QAAI;AACF,WAAKN,QAAL,CAAc;AACZI,QAAAA,MAAM,EAAE,MAAMb,SAAS,CAAC,KAAKO,KAAL,CAAWS,MAAZ,CADX;AAEZN,QAAAA,OAAO,EAAE,KAFG;AAGZI,QAAAA,IAAI,EAAC,KAAKP,KAAL,CAAWO;AAHJ,OAAd;AAKD,KAND,CAME,OAAOG,CAAP,EAAU;AACV;AACA;AACA,WAAKR,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,IADG;AAEZC,QAAAA,YAAY,EAAEM,CAAC,CAACC;AAFJ,OAAd,EAHU,CAOZ;AACD;AACA;;AACDC,EAAAA,qBAAqB,CAACC,SAAD,EAAiBC,SAAjB,EAAiC;AACpD,WAAO,KAAKd,KAAL,CAAWM,MAAX,KAAsBQ,SAAS,CAACR,MAAvC;AACD;;AAED,QAAMS,kBAAN,GAA2B;AACzB,QAAG,KAAKV,KAAL,CAAWE,IAAd,EAAmB;AACnB,UAAI;AACF,aAAKL,QAAL,CAAc;AACZI,UAAAA,MAAM,EAAE,MAAMb,SAAS,CAAC,KAAKO,KAAL,CAAWS,MAAZ,CADX;AAEZN,UAAAA,OAAO,EAAE,KAFG;AAGZI,UAAAA,IAAI,EAAC,KAAKP,KAAL,CAAWO;AAHJ,SAAd;AAKD,OAND,CAME,OAAOG,CAAP,EAAU;AACV;AACA;AACA,aAAKR,QAAL,CAAc;AACZC,UAAAA,OAAO,EAAE,IADG;AAEZC,UAAAA,YAAY,EAAEM,CAAC,CAACC;AAFJ,SAAd,EAHU,CAOZ;AACD;AACA;AACF;;AAcCK,EAAAA,MAAM,GAAG;AACP,UAAMC,CAAC,GAAG,KAAKZ,KAAL,CAAWC,MAArB;;AACA,QAAG,OAAOW,CAAP,KAAc,QAAjB,EAA0B;AACxB,0BAAO,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,CAAZ;AAAe,QAAA,GAAG,EAAE,KAAKZ,KAAL,CAAWD,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACL;;AAED,QAAG,KAAKC,KAAL,CAAWF,OAAd,EAAsB;AACpB,0BAAO,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAE,KAAKE,KAAL,CAAWD,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAEG,KAHL,MAGS;AACL,0BACE,uDACD,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAEa,CAAC,CAACC,EAAjB;AAAqB,QAAA,EAAE,EAAED,CAAC,CAACC,EAA3B;AAA+B,QAAA,QAAQ,EAAED,CAAC,CAACE,QAA3C;AAAqD,QAAA,IAAI,EAAEF,CAAC,CAACG,QAA7D;AACK,QAAA,SAAS,EAAEH,CAAC,CAACI,SADlB;AAC6B,QAAA,QAAQ,EAAEJ,CAAC,CAACK,QADzC;AAEM,QAAA,KAAK,EAAEL,CAAC,CAACM,KAFf;AAEsB,QAAA,IAAI,EAAEN,CAAC,CAACO,IAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADC,CADF;AAOD;AAEA;;AApFsE","sourcesContent":["import React from 'react';\nimport { getSingle } from '../../api/LibraryClient';\nimport { Err1, ErrS } from '../../errors/error1';\nimport { Eview } from './view';\n\n\ninterface IBooksDisplayState {\n  single: any;\n  isError: boolean;\n  errorMessage: string;\n  good:boolean;\n}\n\nexport class SingleUser extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      single: 'fetching user by id',\n      isError: false,\n      errorMessage: '',\n      good: true,\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        single: await getSingle(this.props.userid),\n        isError: false,\n        good:this.props.good\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message,\n      })\n    // }\n  }\n  }\n  shouldComponentUpdate(nextProps: any, nextState: any) {\n    return this.props.single !== nextState.single;\n  }\n\n  async componentDidUpdate() {\n    if(this.state.good){\n    try {\n      this.setState({\n        single: await getSingle(this.props.userid),\n        isError: false,\n        good:this.props.good\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message,\n      })\n    // }\n  }\n  }\n}\n\n\n  \n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n\n\n  render() {\n    const u = this.state.single;\n    if(typeof(u) === \"string\"){ \n      return <ErrS data={u} err={this.state.errorMessage} />\n}\n\nif(this.state.isError){\n  return <Err1 err={this.state.errorMessage} />\n\n    }else{\n    return(\n      <>\n     <Eview access={u.id} id={u.id} username={u.username} pass={u.password}\n          firstname={u.firstname} lastname={u.lastname}\n           email={u.email} role={u.role} />\n          </>\n    )\n  }\n    \n  }\n  \n}"]},"metadata":{},"sourceType":"module"}