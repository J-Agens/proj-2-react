{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/propject/project-1-mohamedctm/src/components/rem/bystatus.tsx\";\nimport React from 'react';\nimport { sta } from '../../api/LibraryClient';\nimport { Review } from './view1';\nimport { Err2, ErrS } from '../../errors/error1';\nexport class Stat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      single: 'fetching reimbursements by status-- choose a status and hit Fetch',\n      isError: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidMount() {\n    this.normal;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state.single !== nextState.userid;\n  }\n\n  async normal() {\n    try {\n      this.setState({\n        single: await sta(this.props.userid),\n        isError: false\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        single: '',\n        isError: true,\n        errorMessage: e.message\n      }); // }\n    }\n  }\n\n  async componentWillReceiveProps() {\n    this.normal();\n  }\n\n  render() {\n    const data = this.state.single;\n    console.log(typeof data);\n\n    if (typeof data === \"string\") {\n      return /*#__PURE__*/React.createElement(ErrS, {\n        data: data,\n        err: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 16\n        }\n      });\n    }\n\n    if (this.state.isError) {\n      return /*#__PURE__*/React.createElement(Err2, {\n        err: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 14\n        }\n      });\n    } else {\n      return data.map(u => {\n        return /*#__PURE__*/React.createElement(Review, {\n          id: u.reimbursementId,\n          author: u.author,\n          amount: u.amount,\n          resolver: u.resolver,\n          status: u.status,\n          type: u.type,\n          description: u.description,\n          date1: u.dateSubmitted,\n          date2: u.dateResolved,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }\n        });\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/propject/project-1-mohamedctm/src/components/rem/bystatus.tsx"],"names":["React","sta","Review","Err2","ErrS","Stat","Component","constructor","props","clearError","setState","isError","errorMessage","state","single","componentDidMount","normal","shouldComponentUpdate","nextProps","nextState","userid","e","message","componentWillReceiveProps","render","data","console","log","map","u","reimbursementId","author","amount","resolver","status","type","description","dateSubmitted","dateResolved"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,yBAApB;AAEA,SAASC,MAAT,QAAuB,SAAvB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,qBAA3B;AASA,OAAO,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAA4D;AAEjEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SAwCxBC,UAxCwB,GAwCX,MAAM;AACjB,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KA7CuB;;AAEtB,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,mEADG;AAEXH,MAAAA,OAAO,EAAE,KAFE;AAGXC,MAAAA,YAAY,EAAE;AAHH,KAAb;AAKD;;AAED,QAAMG,iBAAN,GAA0B;AACxB,SAAKC,MAAL;AACG;;AAELC,EAAAA,qBAAqB,CAACC,SAAD,EAAiBC,SAAjB,EAAiC;AACpD,WAAO,KAAKN,KAAL,CAAWC,MAAX,KAAsBK,SAAS,CAACC,MAAvC;AACD;;AACD,QAAMJ,MAAN,GAAgB;AACd,QAAI;AACF,WAAKN,QAAL,CAAc;AACZI,QAAAA,MAAM,EAAE,MAAMb,GAAG,CAAC,KAAKO,KAAL,CAAWY,MAAZ,CADL;AAEZT,QAAAA,OAAO,EAAE;AAFG,OAAd;AAID,KALD,CAKE,OAAOU,CAAP,EAAU;AACV;AACA;AACA,WAAKX,QAAL,CAAc;AACZI,QAAAA,MAAM,EAAE,EADI;AAEZH,QAAAA,OAAO,EAAE,IAFG;AAGZC,QAAAA,YAAY,EAAES,CAAC,CAACC;AAHJ,OAAd,EAHU,CAQZ;AACD;AACA;;AAED,QAAMC,yBAAN,GAAkC;AAChC,SAAKP,MAAL;AACD;;AAaDQ,EAAAA,MAAM,GAAG;AAEP,UAAMC,IAAI,GAAG,KAAKZ,KAAL,CAAWC,MAAxB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOF,IAAnB;;AACA,QAAG,OAAOA,IAAP,KAAiB,QAApB,EAA6B;AACzB,0BAAO,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,IAAZ;AAAkB,QAAA,GAAG,EAAE,KAAKZ,KAAL,CAAWD,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAGH;;AAED,QAAG,KAAKC,KAAL,CAAWF,OAAd,EAAsB;AACpB,0BAAO,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAE,KAAKE,KAAL,CAAWD,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD,MAEK;AAED,aAAQa,IAAI,CAACG,GAAL,CAAUC,CAAD,IAAwB;AACrC,4BACI,oBAAC,MAAD;AAAQ,UAAA,EAAE,EAAEA,CAAC,CAACC,eAAd;AAA+B,UAAA,MAAM,EAAED,CAAC,CAACE,MAAzC;AAAiD,UAAA,MAAM,EAAEF,CAAC,CAACG,MAA3D;AAAmE,UAAA,QAAQ,EAAEH,CAAC,CAACI,QAA/E;AAAyF,UAAA,MAAM,EAAEJ,CAAC,CAACK,MAAnG;AAA2G,UAAA,IAAI,EAAEL,CAAC,CAACM,IAAnH;AAAyH,UAAA,WAAW,EAAEN,CAAC,CAACO,WAAxI;AAAqJ,UAAA,KAAK,EAAEP,CAAC,CAACQ,aAA9J;AAA6K,UAAA,KAAK,EAAER,CAAC,CAACS,YAAtL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAIX,OALe,CAAR;AAQL;AAEA;;AA3EgE","sourcesContent":["import React from 'react';\nimport { sta } from '../../api/LibraryClient';\nimport { Reimbursement } from '../../models/Reimbursement';\nimport { Review } from './view1';\nimport { Err2, ErrS } from '../../errors/error1';\n\n\ninterface IBooksDisplayState {\n  single: any;\n  isError: boolean;\n  errorMessage: string;\n}\n\nexport class Stat extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      single: 'fetching reimbursements by status-- choose a status and hit Fetch',\n      isError: false,\n      errorMessage: '',\n    }\n  }\n\n  async componentDidMount() {\n    this.normal;\n      }\n\n  shouldComponentUpdate(nextProps: any, nextState: any) {\n    return this.state.single !== nextState.userid;\n  }\n  async normal () {\n    try {\n      this.setState({\n        single: await sta(this.props.userid),\n        isError: false\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        single: '',\n        isError: true,\n        errorMessage: e.message,\n      })\n    // }\n  }\n  }\n\n  async componentWillReceiveProps() {\n    this.normal();\n  }\n\n  \n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n\n\n  render() {\n\n    const data = this.state.single;\n    console.log(typeof(data));\n    if(typeof(data) === \"string\"){ \n        return <ErrS data={data} err={this.state.errorMessage}/>\n\n\n    }\n\n    if(this.state.isError){\n      return <Err2 err={this.state.errorMessage}/>\n    }else{\n\n        return (data.map((u:Reimbursement|any) =>{\n            return(\n                <Review id={u.reimbursementId} author={u.author} amount={u.amount} resolver={u.resolver} status={u.status} type={u.type} description={u.description} date1={u.dateSubmitted} date2={u.dateResolved} />\n\n)      \n})\n\n        )\n  }\n    \n  }\n  \n}"]},"metadata":{},"sourceType":"module"}