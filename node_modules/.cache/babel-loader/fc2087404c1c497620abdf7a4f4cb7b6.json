{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/Desktop/project-2-react/src/components/pComponent.tsx\";\nimport React from 'react';\nimport { posts, myInfo } from '../api/LibraryClient';\nimport { Postview } from './views/viewPost';\nimport { NavLink } from 'react-router-dom';\nexport default class Posts extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.resolvedf = () => {\n      this.setState({\n        resolved: true,\n        unresolved: false,\n        all: false\n      });\n    };\n\n    this.unresolvedf = () => {\n      this.setState({\n        resolved: false,\n        unresolved: true,\n        all: false\n      });\n    };\n\n    this.allf = () => {\n      this.setState({\n        resolved: false,\n        unresolved: false,\n        all: true\n      });\n    };\n\n    this.state = {\n      data: [],\n      userinfo: [],\n      pending: 0,\n      resolved: false,\n      unresolved: false,\n      all: true,\n      viewPost: true\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        data: await posts(this.props.writerid),\n        userinfo: await myInfo(this.props.writerid),\n        isError: false\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message\n      }); // }\n    }\n  }\n\n  render() {\n    const pending = this.state.data.filter(c => c.status === \"pending\").length;\n    const resolved = this.state.data.filter(c => c.status !== \"pending\").length;\n    const Rolex = this.state.userinfo.permission;\n    let role = '';\n\n    switch (Rolex) {\n      case 1:\n        role = \"admin\";\n        break;\n\n      case 2:\n        role = \"editor\";\n        break;\n\n      default:\n        role = \"writer\";\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"theFrame\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"box themain\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxrow spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, \"Hi \", this.state.userinfo.firstname, \"(\", {\n      role\n    }, \")\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"profile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxrow spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"click\",\n      onClick: this.allf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 71\n      }\n    }, \"All posts \", pending + resolved), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"click\",\n      onClick: this.unresolvedf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 71\n      }\n    }, \"Pending \", pending), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"click\",\n      onClick: this.resolvedf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 71\n      }\n    }, \"Resolved \", resolved), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spcaer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxrow spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      to: \"/create\",\n      id: this.state.userinfo.writerid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 73\n      }\n    }, \"create post\")))), this.state.unresolved && this.state.data.filter(c => c.status === \"pending\").map((u, x) => {\n      return /*#__PURE__*/React.createElement(Postview, {\n        key: x,\n        thekey: x,\n        id: u.postId,\n        author: u.author,\n        postTitle: u.postTitle,\n        postDescription: u.postDescription,\n        postText: u.postText,\n        keywords: u.keyWords,\n        status: u.status,\n        resolver: u.resolver,\n        dateSubmitted: u.dateSubmitted,\n        postType: u.postType,\n        postField: u.postField,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }\n      });\n    }), this.state.resolved && this.state.data.filter(c => c.status !== \"pending\").map((u, x) => {\n      return /*#__PURE__*/React.createElement(Postview, {\n        key: x,\n        thekey: x,\n        id: u.postId,\n        author: u.author,\n        postTitle: u.postTitle,\n        postDescription: u.postDescription,\n        status: u.status,\n        postType: u.postType,\n        postField: u.postField,\n        resolver: u.resolver,\n        dateSubmitted: u.dateSubmitted,\n        postText: u.postText,\n        keywords: u.keyWords,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }\n      });\n    }), this.state.all && this.state.data.map((u, x) => {\n      return /*#__PURE__*/React.createElement(Postview, {\n        key: x,\n        thekey: x,\n        id: u.postId,\n        author: u.author,\n        postTitle: u.postTitle,\n        postDescription: u.postDescription,\n        status: u.status,\n        postType: u.postType,\n        postField: u.postField,\n        resolver: u.resolver,\n        dateSubmitted: u.dateSubmitted,\n        postText: u.postText,\n        keywords: u.keyWords,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }\n      });\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/Desktop/project-2-react/src/components/pComponent.tsx"],"names":["React","posts","myInfo","Postview","NavLink","Posts","Component","constructor","props","resolvedf","setState","resolved","unresolved","all","unresolvedf","allf","state","data","userinfo","pending","viewPost","componentDidMount","writerid","isError","e","errorMessage","message","render","filter","c","status","length","Rolex","permission","role","firstname","map","u","x","postId","author","postTitle","postDescription","postText","keyWords","resolver","dateSubmitted","postType","postField"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { posts, myInfo } from '../api/LibraryClient';\nimport { Post } from '../models/Post';\nimport { Postview } from './views/viewPost';\nimport { NavLink } from 'react-router-dom';\n\nexport default class Posts extends React.Component<any,any> {\n\nconstructor(props:any){\n    super(props);\n    this.state = {\n        data: [],\n        userinfo: [],\n        pending: 0,\n        resolved: false,\n        unresolved:false,\n        all:true,\n        viewPost: true,\n    }\n}\n\nasync componentDidMount() {\n    try {\n        this.setState({\n            data: await posts(this.props.writerid),\n            userinfo: await myInfo(this.props.writerid),\n\n\n            isError: false,\n        })\n      } catch (e) {\n        // We set the error information in our state.\n        // This will let us render something about the error to the end user\n        this.setState({\n          isError: true,\n          errorMessage: e.message,\n        })\n      // }\n    }   \n}\n\nresolvedf = () => {\n    this.setState({\n      resolved: true,\n      unresolved: false,\n      all:false\n    })\n  }\n  unresolvedf = () => {\n    this.setState({\n      resolved: false,\n      unresolved: true,\n      all:false\n    })\n  }\n\n  allf = () => {\n    this.setState({\n      resolved: false,\n      unresolved: false,\n      all:true\n    })\n  }\n    render(){\n        const pending = this.state.data.filter((c: { status: string; }) => c.status === \"pending\").length;\n        const resolved = this.state.data.filter((c: { status: string; }) => c.status !== \"pending\").length;\n        const Rolex = this.state.userinfo.permission;\n        let role = '';\n        switch(Rolex){\n            case 1:\n                role = \"admin\";\n                break;\n                case 2:\n                role=\"editor\";\n                break;\n                default: role =\"writer\";\n        }\n\n        return(\n            <div className=\"theFrame\">\n                <div className=\"box themain\">\n        <div className=\"boxrow spacer\">Hi {this.state.userinfo.firstname}({{role}})</div>  \n        <span className=\"profile\">&nbsp;</span>\n                <div className=\"boxrow spacer\">&nbsp;</div>  \n                <div className=\"boxrow\"><div className=\"spacer\"></div><label className=\"click\" onClick={this.allf}>All posts {pending + resolved}</label> </div>  \n                <div className=\"boxrow\"><div className=\"spacer\"></div><label className=\"click\" onClick={this.unresolvedf}>Pending {pending}</label> </div>  \n                <div className=\"boxrow\"><div className=\"spacer\"></div><label className=\"click\" onClick={this.resolvedf}>Resolved {resolved}</label> </div> \n                <div className=\"spcaer\">&nbsp;</div>\n                <div className=\"boxrow spacer\">\n                    \n                <NavLink to=\"/create\" id={this.state.userinfo.writerid}><button>create post</button></NavLink></div>  \n\n            </div>\n             { this.state.unresolved && (this.state.data.filter((c: { status: string; }) => c.status === \"pending\").map((u:Post|any,x:number) =>{\n                return(\n                    <Postview key={x} thekey={x} id={u.postId} author={u.author} postTitle={u.postTitle}\n                    postDescription={u.postDescription} postText={u.postText} keywords={u.keyWords} status={u.status}\n                    resolver={u.resolver} dateSubmitted={u.dateSubmitted} postType={u.postType} postField={u.postField} />\n                    )      \n                    })         \n        )}\n        {this.state.resolved && (this.state.data.filter((c: { status: string; }) => c.status !== \"pending\").map((u:Post|any,x:number) =>{\n                return(\n                    <Postview key={x} thekey={x} id={u.postId} author={u.author} postTitle={u.postTitle}\n                    postDescription={u.postDescription} status={u.status} postType={u.postType} postField={u.postField}\n                    resolver={u.resolver} dateSubmitted={u.dateSubmitted} postText={u.postText} keywords={u.keyWords} />\n                    )      \n                    })         \n        )}\n        {this.state.all && (this.state.data.map((u:Post|any,x:number) =>{\n                return(\n                    <Postview key={x} thekey={x} id={u.postId} author={u.author} postTitle={u.postTitle}\n                    postDescription={u.postDescription} status={u.status} postType={u.postType} postField={u.postField}\n                    resolver={u.resolver} dateSubmitted={u.dateSubmitted} postText={u.postText} keywords={u.keyWords} />\n                    )      \n                    })         \n        )}\n        \n        </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}