{"ast":null,"code":"import axios from 'axios';\nimport { User } from '../models/User';\nimport { FailedLoginError } from '../errors/FailedLoginError';\nconst libraryClient = axios.create({\n  // baseURL: 'http://54.174.125.219:3001/',\n  baseURL: 'http://localhost:8081/',\n  withCredentials: true\n});\n/**************/\n\nexport async function posts(id) {\n  const response = await libraryClient.get(`/posts/author/${id}`);\n  console.log('All posts by author');\n  return response.data;\n}\nexport async function Allposts() {\n  const response = await libraryClient.get(`/posts`);\n  console.log('All posts');\n  return response.data;\n}\nexport async function Statusposts(s, id) {\n  const response = await libraryClient.put(`/status/${s}/${id}`);\n  console.log('change post status');\n  return response.data;\n}\nexport async function publish(id) {\n  const response = await libraryClient.put(`/publish/${id}`);\n  console.log('publish post');\n  return response.data;\n}\nexport async function unpublish(id) {\n  const response = await libraryClient.put(`/unpublish/${id}`);\n  console.log('Unpublish');\n  return response.data;\n}\nexport async function deletingPost(id) {\n  const response = await libraryClient.delete(`/posts/${id}`);\n  console.log('delete post');\n  return response.data;\n}\nexport async function getPostById(id) {\n  const response = await libraryClient.get(`/posts/${id}`);\n  console.log('All posts');\n  return response.data;\n}\nexport async function myInfo(id) {\n  const response = await libraryClient.get(`/writers/${id}`);\n  console.log('getting user information'); // return response.data;\n\n  const {\n    writerid,\n    username,\n    password,\n    firstname,\n    lastname,\n    email,\n    phone,\n    permission\n  } = response.data;\n  return new User(writerid, username, password, firstname, lastname, email, phone, permission);\n}\nexport async function createPost(a, b, c, d, e, f, g, h, i, j, k, l) {\n  const response = await libraryClient.post(`/posts`, {\n    author: a,\n    postTitle: b,\n    postDescription: c,\n    postText: d,\n    dateSubmitted: e,\n    datePublished: f,\n    postType: g,\n    postField: h,\n    keyWords: i,\n    status: j,\n    resolver: k,\n    published: l\n  });\n  console.log('getting user information');\n  return response.data;\n}\nexport async function updatePost(id, a, b, c, d, e, f, g, h, i, j, k, l) {\n  const response = await libraryClient.put(`/posts/${id}`, {\n    postid: id,\n    author: a,\n    postTitle: b,\n    postDescription: c,\n    postText: d,\n    dateSubmitted: e,\n    datePublished: f,\n    postType: g,\n    postField: h,\n    keyWords: i,\n    status: j,\n    resolver: k,\n    published: l\n  });\n  console.log('getting user information');\n  return response.data;\n}\nexport async function updateSelf(writerid, username, password, firsname, lastname, email, phone, permission) {\n  const response = await libraryClient.put(`/writers/${writerid}`, {\n    writerid: writerid,\n    username: username,\n    password: password,\n    firstname: firsname,\n    lastname: lastname,\n    email: email,\n    phone: phone,\n    permission: permission\n  });\n  console.log('updating self- information');\n  return response.data;\n}\nexport async function madeUser(username, password, firsname, lastname, email, phone, permission) {\n  const response = await libraryClient.post(`/writers`, {\n    username: username,\n    password: password,\n    firstname: firsname,\n    lastname: lastname,\n    email: email,\n    phone: phone,\n    permission: permission\n  });\n  console.log('updating self- information');\n  return response.data;\n}\n/**************/\n\nexport async function getAllUsers() {\n  const response = await libraryClient.get('/writers');\n  console.log(response.data);\n  return response.data;\n}\nexport async function getOneUsers(id) {\n  const response = await libraryClient.get(`/writers/${id}`);\n  console.log(response.data);\n  return response.data;\n}\nexport async function deleteUser(id) {\n  const response = await libraryClient.delete(`/writers/${id}`);\n  console.log(response.data);\n  return \"user deleted!\";\n}\nexport async function destroy() {\n  const response = await libraryClient.get('/logout'); // return response.data;\n\n  console.log(response.data);\n}\nexport async function updatexx(a, b, c, d, e, f, g) {\n  const response = await libraryClient.patch(`/users`, {\n    username: !!a ? a : null,\n    password: !!b ? b : null,\n    firstname: !!c ? c : null,\n    lastname: !!d ? d : null,\n    email: !!e ? e : null,\n    roleId: !!f ? f : null,\n    userId: g\n  });\n  return response.data;\n}\nexport async function getSingle(id) {\n  const response = await libraryClient.get(`/users/${id}`);\n  console.log(response.data);\n  return response.data;\n}\nexport async function login(un, pw) {\n  try {\n    const response = await libraryClient.post('/login', {\n      username: un,\n      password: pw\n    });\n    const {\n      writerid,\n      username,\n      password,\n      firstname,\n      lastname,\n      email,\n      phone,\n      permission\n    } = response.data;\n    return new User(writerid, username, password, firstname, lastname, email, phone, permission);\n  } catch (e) {\n    if (e.response.status === 401 || e.response.status === 400) {\n      throw new FailedLoginError('Failed to authenticate', un);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw e;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/johna/Development/training/react-revature/projects/proj-2-react/src/api/LibraryClient.tsx"],"names":["axios","User","FailedLoginError","libraryClient","create","baseURL","withCredentials","posts","id","response","get","console","log","data","Allposts","Statusposts","s","put","publish","unpublish","deletingPost","delete","getPostById","myInfo","writerid","username","password","firstname","lastname","email","phone","permission","createPost","a","b","c","d","e","f","g","h","i","j","k","l","post","author","postTitle","postDescription","postText","dateSubmitted","datePublished","postType","postField","keyWords","status","resolver","published","updatePost","postid","updateSelf","firsname","madeUser","getAllUsers","getOneUsers","deleteUser","destroy","updatexx","patch","roleId","userId","getSingle","login","un","pw"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { User } from '../models/User';\r\n\r\nimport { FailedLoginError } from '../errors/FailedLoginError';\r\nimport { Post } from '../models/Post';\r\n\r\n\r\nconst libraryClient = axios.create({\r\n  // baseURL: 'http://54.174.125.219:3001/',\r\n  baseURL: 'http://localhost:8081/',\r\n  withCredentials: true,\r\n});\r\n/**************/\r\nexport async function posts(id:number) : Promise<Post[] | any> {\r\n  const response = await libraryClient.get(`/posts/author/${id}`);\r\n  console.log('All posts by author');\r\n  return response.data;\r\n}\r\n\r\nexport async function Allposts() : Promise<Post[] | any> {\r\n  const response = await libraryClient.get(`/posts`);\r\n  console.log('All posts');\r\n  return response.data;\r\n}\r\n\r\nexport async function Statusposts(s:string,id:number) : Promise<Post[] | any> {\r\n  const response = await libraryClient.put(`/status/${s}/${id}`);\r\n  console.log('change post status');\r\n  return response.data;\r\n}\r\n\r\nexport async function publish(id:number) : Promise<Post[] | any> {\r\n  const response = await libraryClient.put(`/publish/${id}`);\r\n  console.log('publish post');\r\n  return response.data;\r\n}\r\n\r\nexport async function unpublish(id:number) : Promise<Post[] | any> {\r\n  const response = await libraryClient.put(`/unpublish/${id}`);\r\n  console.log('Unpublish');\r\n  return response.data;\r\n}\r\n\r\nexport async function deletingPost(id:number) : Promise<Post[] | any> {\r\n  const response = await libraryClient.delete(`/posts/${id}`);\r\n  console.log('delete post');\r\n  return response.data;\r\n}\r\n\r\nexport async function getPostById(id:number) : Promise<User[] | any> {\r\n  const response = await libraryClient.get(`/posts/${id}`);\r\n  console.log('All posts');\r\n  return response.data;\r\n}\r\n\r\nexport async function myInfo(id:number) : Promise<User[] | any> {\r\n  const response = await libraryClient.get(`/writers/${id}`);\r\n  console.log('getting user information');\r\n  // return response.data;\r\n  const {writerid, username, password,firstname,lastname, email, phone, permission} = response.data;\r\n    return new User(writerid, username, password, firstname,lastname, email, phone,permission);\r\n}\r\n\r\nexport async function createPost(a:number,b:string,c:string,d:string,e:any,f:any,g:string,h:string,\r\n  i:string,j:string,k:number,l:number) : Promise<Post[] | any> {\r\n  const response = await libraryClient.post(`/posts`,\r\n\t{\r\n    author:a,\r\npostTitle:b,\r\n\tpostDescription : c,\r\n  postText : d,\r\n  dateSubmitted:e,\r\n  datePublished:f,\r\n  postType:g,\r\n\tpostField : h,\r\n\tkeyWords : i,\r\n\t\tstatus : j,\r\n\tresolver : k,\r\n\tpublished : l});\r\n  console.log('getting user information');\r\n  return response.data;\r\n}\r\nexport async function updatePost(id:number,a:number,b:string,c:string,d:string,e:any,f:any,g:string,h:string,\r\n  i:string,j:string,k:number,l:number) : Promise<Post[] | any> {\r\n  const response = await libraryClient.put(`/posts/${id}`,\r\n\t{\r\n    postid: id,\r\n    author:a,\r\npostTitle:b,\r\n\tpostDescription : c,\r\n  postText : d,\r\n  dateSubmitted:e,\r\n  datePublished:f,\r\n  postType:g,\r\n\tpostField : h,\r\n\tkeyWords : i,\r\n\t\tstatus : j,\r\n\tresolver : k,\r\n\tpublished : l});\r\n  console.log('getting user information');\r\n  return response.data;\r\n}\r\n\r\nexport async function updateSelf(writerid:number,username:string,password:string,firsname:string,lastname:string,email:string,phone:string,permission:number) : Promise<Post[] | any> {\r\n  const response = await libraryClient.put(`/writers/${writerid}`,\r\n\t{\r\n    writerid: writerid,\r\n    username:username,\r\npassword:password,\r\n\tfirstname : firsname,\r\n  lastname : lastname,\r\n  email:email,\r\n  phone:phone,\r\n  permission:permission,\r\n});\r\n  console.log('updating self- information');\r\n  return response.data;\r\n}\r\n\r\nexport async function madeUser(username:string,password:string,firsname:string,lastname:string,email:string,phone:string,permission:number) : Promise<Post[] | any> {\r\n  const response = await libraryClient.post(`/writers`,\r\n\t{\r\n    \r\n    username:username,\r\npassword:password,\r\n\tfirstname : firsname,\r\n  lastname : lastname,\r\n  email:email,\r\n  phone:phone,\r\n  permission:permission,\r\n});\r\n  console.log('updating self- information');\r\n  return response.data;\r\n}\r\n/**************/\r\n\r\nexport async function getAllUsers() : Promise<User[] | any> {\r\n  const response = await libraryClient.get('/writers');\r\n  console.log(response.data);\r\n  return response.data;\r\n}\r\n\r\nexport async function getOneUsers(id:number) : Promise<User[] | any> {\r\n  const response = await libraryClient.get(`/writers/${id}`);\r\n  console.log(response.data);\r\n  return response.data;\r\n}\r\nexport async function deleteUser(id:number) : Promise<User[] | any> {\r\n  const response = await libraryClient.delete(`/writers/${id}`);\r\n  console.log(response.data);\r\n  return \"user deleted!\";\r\n}\r\n\r\nexport async function destroy() : Promise<any> {\r\n  const response = await libraryClient.get('/logout');\r\n  // return response.data;\r\n  console.log(response.data);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport async function updatexx(a:any,b:any,c:any,d:any,e:any,f:any, g:number) : Promise<User[] | any> {\r\n\r\n  const response = await libraryClient.patch(`/users`,{username:!!(a)?a:null,password:!!(b)?b:null,firstname:!!(c)?c:null,lastname:!!(d)?d:null,email:!!(e)?e:null,roleId:!!(f)?f:null, userId:g});\r\n  return response.data;\r\n}\r\n\r\n\r\n\r\n\r\nexport async function getSingle(id:number) : Promise<User[] | any> {\r\n  const response = await libraryClient.get(`/users/${id}`);\r\n  console.log(response.data);\r\n  return response.data;\r\n}\r\n\r\nexport async function login(un: string, pw: string): Promise<User> {\r\n  try {\r\n    const response = await libraryClient.post('/login', {username: un, password: pw});\r\n    const {writerid, username, password,firstname,lastname, email, phone, permission} = response.data;\r\n    return new User(writerid, username, password, firstname,lastname, email, phone,permission);\r\n  } catch (e) {\r\n    if(e.response.status === 401 ||e.response.status === 400) {\r\n      throw new FailedLoginError('Failed to authenticate', un);\r\n    } else {\r\n      // We could throw a different custom error, this exposes a little too much to the user.\r\n      throw e;\r\n    }\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module"}