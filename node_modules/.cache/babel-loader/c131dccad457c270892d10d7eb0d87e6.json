{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/Desktop/project-2-react/src/components/pComponent.tsx\";\nimport React from 'react';\nimport { posts, myInfo } from '../api/LibraryClient';\nimport { Postview } from './views/viewPost';\nimport { Route, Redirect } from 'react-router';\nexport default class Posts extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createPost = () => {\n      return /*#__PURE__*/React.createElement(Route, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/hello\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    this.resolvedf = () => {\n      this.setState({\n        resolved: true,\n        unresolved: false,\n        all: false\n      });\n    };\n\n    this.unresolvedf = () => {\n      this.setState({\n        resolved: false,\n        unresolved: true,\n        all: false\n      });\n    };\n\n    this.allf = () => {\n      this.setState({\n        resolved: false,\n        unresolved: false,\n        all: true\n      });\n    };\n\n    this.state = {\n      data: [],\n      userinfo: [],\n      pending: 0,\n      resolved: false,\n      unresolved: false,\n      all: true\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        data: await posts(this.props.writerid),\n        userinfo: await myInfo(this.props.writerid),\n        isError: false\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message\n      }); // }\n    }\n  }\n\n  render() {\n    const pending = this.state.data.filter(c => c.status === \"pending\").length;\n    const resolved = this.state.data.filter(c => c.status !== \"pending\").length;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"theFrame\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"box themain\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxrow spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, \"Hi \", this.state.userinfo.firstname), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxrow spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"click\",\n      onClick: this.allf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 71\n      }\n    }, \"All posts \", pending + resolved), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"click\",\n      onClick: this.unresolvedf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 71\n      }\n    }, \"Pending \", pending), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"click\",\n      onClick: this.resolvedf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 71\n      }\n    }, \"Resolved \", resolved), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spcaer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxrow spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.createPost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, \"create post\"))), this.state.unresolved && this.state.data.filter(c => c.status === \"pending\").map((u, x) => {\n      return /*#__PURE__*/React.createElement(Postview, {\n        key: x,\n        thekey: x,\n        id: u.postid,\n        author: u.author,\n        postTitle: u.postTitle,\n        postDescription: u.postDescription,\n        status: u.status,\n        resolver: u.resolver,\n        dateSubmitted: u.dateSubmitted,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }\n      });\n    }), this.state.resolved && this.state.data.filter(c => c.status !== \"pending\").map((u, x) => {\n      return /*#__PURE__*/React.createElement(Postview, {\n        key: x,\n        thekey: x,\n        id: u.postid,\n        author: u.author,\n        postTitle: u.postTitle,\n        postDescription: u.postDescription,\n        status: u.status,\n        resolver: u.resolver,\n        dateSubmitted: u.dateSubmitted,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }\n      });\n    }), this.state.all && this.state.data.map((u, x) => {\n      return /*#__PURE__*/React.createElement(Postview, {\n        key: x,\n        thekey: x,\n        id: u.postid,\n        author: u.author,\n        postTitle: u.postTitle,\n        postDescription: u.postDescription,\n        status: u.status,\n        resolver: u.resolver,\n        dateSubmitted: u.dateSubmitted,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }\n      });\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/Desktop/project-2-react/src/components/pComponent.tsx"],"names":["React","posts","myInfo","Postview","Route","Redirect","Posts","Component","constructor","props","createPost","resolvedf","setState","resolved","unresolved","all","unresolvedf","allf","state","data","userinfo","pending","componentDidMount","writerid","isError","e","errorMessage","message","render","filter","c","status","length","firstname","map","u","x","postid","author","postTitle","postDescription","resolver","dateSubmitted"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { posts, myInfo } from '../api/LibraryClient';\nimport { Post } from '../models/Post';\nimport { Postview } from './views/viewPost';\nimport { Switch, Route, Redirect } from 'react-router';\n\nexport default class Posts extends React.Component<any,any> {\n\nconstructor(props:any){\n    super(props);\n    this.state = {\n        data: [],\n        userinfo: [],\n        pending: 0,\n        resolved: false,\n        unresolved:false,\n        all:true,\n    }\n}\n\nasync componentDidMount() {\n    try {\n        this.setState({\n            data: await posts(this.props.writerid),\n            userinfo: await myInfo(this.props.writerid),\n\n\n            isError: false,\n        })\n      } catch (e) {\n        // We set the error information in our state.\n        // This will let us render something about the error to the end user\n        this.setState({\n          isError: true,\n          errorMessage: e.message,\n        })\n      // }\n    }   \n}\n\ncreatePost = () =>{\n    return (\n        <Route>\n        <Redirect to=\"/hello\"/>\n        </Route>\n      )\n}\nresolvedf = () => {\n    this.setState({\n      resolved: true,\n      unresolved: false,\n      all:false\n    })\n  }\n  unresolvedf = () => {\n    this.setState({\n      resolved: false,\n      unresolved: true,\n      all:false\n    })\n  }\n  allf = () => {\n    this.setState({\n      resolved: false,\n      unresolved: false,\n      all:true\n    })\n  }\n    render(){\n        const pending = this.state.data.filter((c: { status: string; }) => c.status === \"pending\").length;\n        const resolved = this.state.data.filter((c: { status: string; }) => c.status !== \"pending\").length;\n\n        return(\n            <div className=\"theFrame\">\n                <div className=\"box themain\">\n        <div className=\"boxrow spacer\">Hi {this.state.userinfo.firstname}</div>  \n                <div className=\"boxrow spacer\">&nbsp;</div>  \n                <div className=\"boxrow\"><div className=\"spacer\"></div><label className=\"click\" onClick={this.allf}>All posts {pending + resolved}</label> </div>  \n                <div className=\"boxrow\"><div className=\"spacer\"></div><label className=\"click\" onClick={this.unresolvedf}>Pending {pending}</label> </div>  \n                <div className=\"boxrow\"><div className=\"spacer\"></div><label className=\"click\" onClick={this.resolvedf}>Resolved {resolved}</label> </div> \n                <div className=\"spcaer\">&nbsp;</div>\n                <div className=\"boxrow spacer\">\n                    \n                <button onClick={this.createPost}>create post</button></div>  \n\n            </div>\n             { this.state.unresolved && (this.state.data.filter((c: { status: string; }) => c.status === \"pending\").map((u:Post|any,x:number) =>{\n                return(\n                    <Postview key={x} thekey={x} id={u.postid} author={u.author} postTitle={u.postTitle}\n                    postDescription={u.postDescription} status={u.status}\n                    resolver={u.resolver} dateSubmitted={u.dateSubmitted} />\n                    )      \n                    })         \n        )}\n        {this.state.resolved && (this.state.data.filter((c: { status: string; }) => c.status !== \"pending\").map((u:Post|any,x:number) =>{\n                return(\n                    <Postview key={x} thekey={x} id={u.postid} author={u.author} postTitle={u.postTitle}\n                    postDescription={u.postDescription} status={u.status}\n                    resolver={u.resolver} dateSubmitted={u.dateSubmitted} />\n                    )      \n                    })         \n        )}\n        {this.state.all && (this.state.data.map((u:Post|any,x:number) =>{\n                return(\n                    <Postview key={x} thekey={x} id={u.postid} author={u.author} postTitle={u.postTitle}\n                    postDescription={u.postDescription} status={u.status}\n                    resolver={u.resolver} dateSubmitted={u.dateSubmitted} />\n                    )      \n                    })         \n        )}\n        </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}