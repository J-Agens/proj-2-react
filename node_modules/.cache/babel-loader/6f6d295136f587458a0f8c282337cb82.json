{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/propject/project-1-mohamedctm/src/components/rem/bystatus.tsx\";\nimport React from 'react'; // import { sta } from '../../api/LibraryClient';\n\nimport { Review } from './view1';\nexport class Stat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      single: 'fetching reimbursements by status-- choose a status and hit Fetch',\n      isError: false,\n      errorMessage: '',\n      singlee: this.props.singlee\n    };\n  } // async componentWillUnmount() {\n  //   this.setState({\n  //     single: false,\n  //         isError: false\n  //       })\n  //     }\n  // shouldComponentUpdate(nextProps: any, nextState: any) {\n  //   return this.props.userid !== nextState.userid;\n  // }\n  // async componentDidUpdate() {\n  //   try {\n  //     this.setState({\n  //       single: await sta(this.props.userid),\n  //       isError: false\n  //     })\n  //   } catch (e) {\n  //     // We set the error information in our state.\n  //     // This will let us render something about the error to the end user\n  //     this.setState({\n  //       single: '',\n  //       isError: true,\n  //       errorMessage: e.message,\n  //     })\n  //   // }\n  // }\n  // }\n\n\n  render() {\n    const data = this.state.singlee;\n    return data.map(u => {\n      return /*#__PURE__*/React.createElement(Review, {\n        id: u.reimbursementId,\n        author: u.author,\n        amount: u.amount,\n        resolver: u.resolver,\n        status: u.status,\n        type: u.type,\n        description: u.description,\n        date1: u.dateSubmitted,\n        date2: u.dateResolved,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/propject/project-1-mohamedctm/src/components/rem/bystatus.tsx"],"names":["React","Review","Stat","Component","constructor","props","clearError","setState","isError","errorMessage","state","single","singlee","render","data","map","u","reimbursementId","author","amount","resolver","status","type","description","dateSubmitted","dateResolved"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,SAASC,MAAT,QAAuB,SAAvB;AAWA,OAAO,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAA4D;AAEjEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SA0CxBC,UA1CwB,GA0CX,MAAM;AACjB,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KA/CuB;;AAEtB,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,mEADG;AAEXH,MAAAA,OAAO,EAAE,KAFE;AAGXC,MAAAA,YAAY,EAAE,EAHH;AAIXG,MAAAA,OAAO,EAAC,KAAKP,KAAL,CAAWO;AAJR,KAAb;AAMD,GAVgE,CAYjE;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAaAC,EAAAA,MAAM,GAAG;AAEP,UAAMC,IAAI,GAAG,KAAKJ,KAAL,CAAWE,OAAxB;AAEI,WAAQE,IAAI,CAACC,GAAL,CAAUC,CAAD,IAAwB;AACrC,0BACI,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAEA,CAAC,CAACC,eAAd;AAA+B,QAAA,MAAM,EAAED,CAAC,CAACE,MAAzC;AAAiD,QAAA,MAAM,EAAEF,CAAC,CAACG,MAA3D;AAAmE,QAAA,QAAQ,EAAEH,CAAC,CAACI,QAA/E;AAAyF,QAAA,MAAM,EAAEJ,CAAC,CAACK,MAAnG;AAA2G,QAAA,IAAI,EAAEL,CAAC,CAACM,IAAnH;AAAyH,QAAA,WAAW,EAAEN,CAAC,CAACO,WAAxI;AAAqJ,QAAA,KAAK,EAAEP,CAAC,CAACQ,aAA9J;AAA6K,QAAA,KAAK,EAAER,CAAC,CAACS,YAAtL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGX,KAJe,CAAR;AAOL;;AAhEgE","sourcesContent":["import React from 'react';\n// import { sta } from '../../api/LibraryClient';\nimport { Reimbursement } from '../../models/Reimbursement';\nimport { Review } from './view1';\nimport { Err2, ErrS } from '../../errors/error1';\n\n\ninterface IBooksDisplayState {\n  single: any;\n  isError: boolean;\n  errorMessage: string;\n  singlee:Reimbursement[]|any;\n}\n\nexport class Stat extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      single: 'fetching reimbursements by status-- choose a status and hit Fetch',\n      isError: false,\n      errorMessage: '',\n      singlee:this.props.singlee,\n    }\n  }\n\n  // async componentWillUnmount() {\n  //   this.setState({\n  //     single: false,\n  //         isError: false\n  //       })\n  //     }\n\n  // shouldComponentUpdate(nextProps: any, nextState: any) {\n  //   return this.props.userid !== nextState.userid;\n  // }\n\n  // async componentDidUpdate() {\n  //   try {\n\n  //     this.setState({\n  //       single: await sta(this.props.userid),\n  //       isError: false\n  //     })\n  //   } catch (e) {\n  //     // We set the error information in our state.\n  //     // This will let us render something about the error to the end user\n  //     this.setState({\n  //       single: '',\n  //       isError: true,\n  //       errorMessage: e.message,\n  //     })\n  //   // }\n  // }\n  // }\n\n  \n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n\n\n  render() {\n\n    const data = this.state.singlee;\n\n        return (data.map((u:Reimbursement|any) =>{\n            return(\n                <Review id={u.reimbursementId} author={u.author} amount={u.amount} resolver={u.resolver} status={u.status} type={u.type} description={u.description} date1={u.dateSubmitted} date2={u.dateResolved} />\n)      \n})\n\n        )\n  }\n  \n}"]},"metadata":{},"sourceType":"module"}