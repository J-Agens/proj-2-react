{"ast":null,"code":"import axios from 'axios';\nimport { User } from '../models/User';\nimport { Reimbursement } from '../models/Reimbursement';\nimport { FailedLoginError } from '../errors/FailedLoginError';\nconst libraryClient = axios.create({\n  baseURL: 'http://54.174.125.219:3001/',\n  withCredentials: true\n});\n/**************/\n\nexport async function posts(id) {\n  const response = await libraryClient.get(`/posts/author/${id}`);\n  console.log('All posts');\n  return response.data;\n}\nexport async function myInfo(id) {\n  const response = await libraryClient.get(`/writers/${id}`);\n  console.log('getting user information'); // return response.data;\n\n  const {\n    writerid,\n    username,\n    password,\n    firstname,\n    lastname,\n    email,\n    phone,\n    permission\n  } = response.data;\n  return new User(writerid, username, password, firstname, lastname, email, phone, permission);\n}\nexport async function createPost(id, a, b, c, d, e, f, g, h, i, j, k, l) {\n  const response = await libraryClient.post(`/posts`, {\n    author: a,\n    postTitle: b,\n    postDescription: c,\n    posttext: d,\n    posttype: g,\n    postfield: h,\n    keyWords: i,\n    status: j,\n    resolver: k,\n    published: l\n  });\n  console.log('getting user information');\n  return response.data;\n}\n/**************/\n\nexport async function getAllUsers() {\n  const response = await libraryClient.get('/users'); // return response.data;\n\n  console.log(response.data);\n  return response.data; // return response.data.map((userObj: any) => {\n  //   const {id, username, password, firstname, lastname, email, role} = userObj;\n  //   return new User(id, username, password, firstname, lastname,email, role);\n  // });\n}\nexport async function destroy() {\n  const response = await libraryClient.get('/logout'); // return response.data;\n\n  console.log(response.data);\n}\nexport async function Allreimbursements() {\n  const response = await libraryClient.get('/reimbursements'); // return response.data;\n\n  console.log(response.data);\n  return response.data.map(userObj => {\n    const {\n      reimbursementId,\n      author,\n      amount,\n      dateSubmitted,\n      dateResolved,\n      description,\n      resolver,\n      status,\n      type\n    } = userObj;\n    return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type);\n  });\n}\nexport async function createNew(a, b, c, d) {\n  const response = await libraryClient.post(`/reimbursements`, {\n    id: a,\n    amount: b,\n    description: c,\n    type: d\n  });\n  return response.data;\n}\nexport async function updatexx(a, b, c, d, e, f, g) {\n  const response = await libraryClient.patch(`/users`, {\n    username: !!a ? a : null,\n    password: !!b ? b : null,\n    firstname: !!c ? c : null,\n    lastname: !!d ? d : null,\n    email: !!e ? e : null,\n    roleId: !!f ? f : null,\n    userId: g\n  });\n  return response.data;\n}\nexport async function authorRe(id) {\n  const response = await libraryClient.get(`reimbursements/author/userid/${!!id ? id : 1}`);\n  console.log(response.data);\n  return response.data; // return response.data.map((userObj: any) => {\n  //   const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n  //   return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  // });\n}\nexport async function patching(a, b, c, d, e, f) {\n  const response = await libraryClient.patch(`reimbursements/`, {\n    reimbursementid: !!a ? a : null,\n    resolver: !!b ? b : null,\n    amount: !!c ? c : null,\n    description: !!d ? d : null,\n    status: !!e ? e : null,\n    type: !!f ? f : null\n  });\n  console.log(response.data);\n  return response.data; // return response.data.map((userObj: any) => {\n  //   const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n  //   return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  // });\n}\nexport async function sta(id) {\n  const response = await libraryClient.get(`reimbursements/status/${id}`);\n  console.log(response.data);\n  return response.data.map(userObj => {\n    const {\n      reimbursementId,\n      author,\n      amount,\n      dateSubmitted,\n      dateResolved,\n      description,\n      resolver,\n      status,\n      type\n    } = userObj;\n    return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type);\n  });\n}\nexport async function getSingle(id) {\n  const response = await libraryClient.get(`/users/${id}`);\n  console.log(response.data);\n  return response.data;\n}\nexport async function login(un, pw) {\n  try {\n    const response = await libraryClient.post('/login', {\n      username: un,\n      password: pw\n    });\n    const {\n      writerid,\n      username,\n      password,\n      firstname,\n      lastname,\n      email,\n      phone,\n      permission\n    } = response.data;\n    return new User(writerid, username, password, firstname, lastname, email, phone, permission);\n  } catch (e) {\n    if (e.response.status === 401 || e.response.status === 400) {\n      throw new FailedLoginError('Failed to authenticate', un);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw e;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/Shadow/Desktop/project-2-react/src/api/LibraryClient.tsx"],"names":["axios","User","Reimbursement","FailedLoginError","libraryClient","create","baseURL","withCredentials","posts","id","response","get","console","log","data","myInfo","writerid","username","password","firstname","lastname","email","phone","permission","createPost","a","b","c","d","e","f","g","h","i","j","k","l","post","author","postTitle","postDescription","posttext","posttype","postfield","keyWords","status","resolver","published","getAllUsers","destroy","Allreimbursements","map","userObj","reimbursementId","amount","dateSubmitted","dateResolved","description","type","createNew","updatexx","patch","roleId","userId","authorRe","patching","reimbursementid","sta","getSingle","login","un","pw"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { User } from '../models/User';\nimport { Reimbursement } from '../models/Reimbursement';\n\nimport { FailedLoginError } from '../errors/FailedLoginError';\nimport { Post } from '../models/Post';\n\n\nconst libraryClient = axios.create({\n  baseURL: 'http://54.174.125.219:3001/',\n  withCredentials: true,\n});\n/**************/\nexport async function posts(id:number) : Promise<User[] | any> {\n  const response = await libraryClient.get(`/posts/author/${id}`);\n  console.log('All posts');\n  return response.data;\n}\n\nexport async function myInfo(id:number) : Promise<User[] | any> {\n  const response = await libraryClient.get(`/writers/${id}`);\n  console.log('getting user information');\n  // return response.data;\n  const {writerid, username, password,firstname,lastname, email, phone, permission} = response.data;\n    return new User(writerid, username, password, firstname,lastname, email, phone,permission);\n}\n\nexport async function createPost(id:number|any,a:number,b:string,c:string,d:string,e:any,f:any,g:string,h:string,\n  i:string,j:string,k:number,l:number) : Promise<Post[] | any> {\n  const response = await libraryClient.post(`/posts`,\n\t{\n    author:a,\npostTitle:b,\n\tpostDescription : c,\n\tposttext : d,\n\tposttype : g,\n\tpostfield : h,\n\tkeyWords : i,\n\t\tstatus : j,\n\tresolver : k,\n\tpublished : l});\n  console.log('getting user information');\n  return response.data;\n}\n/**************/\n\nexport async function getAllUsers() : Promise<User[] | any> {\n  const response = await libraryClient.get('/users');\n  // return response.data;\n  console.log(response.data);\n  return response.data;\n  // return response.data.map((userObj: any) => {\n  //   const {id, username, password, firstname, lastname, email, role} = userObj;\n  //   return new User(id, username, password, firstname, lastname,email, role);\n  // });\n}\n\nexport async function destroy() : Promise<any> {\n  const response = await libraryClient.get('/logout');\n  // return response.data;\n  console.log(response.data);\n}\n\nexport async function Allreimbursements() : Promise<Reimbursement[] | any> {\n  const response = await libraryClient.get('/reimbursements');\n  // return response.data;\n  console.log(response.data);\n  return response.data.map((userObj: any) => {\n    const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n    return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  });\n}\n\n\n\n\nexport async function createNew(a:number,b:number,c:string, d:number) : Promise<Reimbursement[] | any> {\n\n  const response = await libraryClient.post(`/reimbursements`,{id:a,amount:b,description:c,type:d});\n  return response.data;\n}\n\nexport async function updatexx(a:any,b:any,c:any,d:any,e:any,f:any, g:number) : Promise<User[] | any> {\n\n  const response = await libraryClient.patch(`/users`,{username:!!(a)?a:null,password:!!(b)?b:null,firstname:!!(c)?c:null,lastname:!!(d)?d:null,email:!!(e)?e:null,roleId:!!(f)?f:null, userId:g});\n  return response.data;\n}\n\nexport async function authorRe(id:number) : Promise<Reimbursement[] | any> {\n  const response = await libraryClient.get(`reimbursements/author/userid/${!!(id)?id:1}`);\n  console.log(response.data);\n  return response.data;\n  // return response.data.map((userObj: any) => {\n  //   const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n  //   return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  // });\n}\n\nexport async function patching(a:any,b:any,c:any,d:any,e:any,f:any) : Promise<Reimbursement[] | any> {\n  const response = await libraryClient.patch(`reimbursements/`,{reimbursementid:!!(a)?a:null,resolver:!!(b)?b:null,amount:!!(c)?c:null,description:!!(d)?d:null,status:!!(e)?e:null,type:!!(f)?f:null});\n  console.log(response.data);\n  return response.data;\n  // return response.data.map((userObj: any) => {\n  //   const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n  //   return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  // });\n}\n\nexport async function sta(id:number) : Promise<Reimbursement[] | any> {\n  const response = await libraryClient.get(`reimbursements/status/${id}`);\n  console.log(response.data);\n  return response.data.map((userObj: any) => {\n    const {reimbursementId, author, amount, dateSubmitted, dateResolved, description, resolver, status, type} = userObj;\n    return new Reimbursement(reimbursementId, author, amount, dateSubmitted, dateResolved,description, resolver,status, type);\n  });\n}\n\nexport async function getSingle(id:number) : Promise<User[] | any> {\n  const response = await libraryClient.get(`/users/${id}`);\n  console.log(response.data);\n  return response.data;\n}\n\nexport async function login(un: string, pw: string): Promise<User> {\n  try {\n    const response = await libraryClient.post('/login', {username: un, password: pw});\n    const {writerid, username, password,firstname,lastname, email, phone, permission} = response.data;\n    return new User(writerid, username, password, firstname,lastname, email, phone,permission);\n  } catch (e) {\n    if(e.response.status === 401 ||e.response.status === 400) {\n      throw new FailedLoginError('Failed to authenticate', un);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw e;\n    }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module"}