{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/react1/myapp/src/components/getUser.tsx\";\nimport React from 'react';\nimport { getAllUsers } from '../api/LibraryClient';\nexport class getUser extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await getAllUsers()\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.isError) {\n      //map to a string so quicktable can render this.\n      return this.state.members.map(u => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: u.id,\n          className: \"col\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }\n        }, \"userid:  \", u.id), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }\n        }, \"username:  \", u.username), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }\n        }, \"password:  \", u.password), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 11\n          }\n        }, \"firstname: \", u.firstname), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }\n        }, \"lastname: \", u.lastname), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 11\n          }\n        }, \"email: \", u.email), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 11\n          }\n        }, \"role: \", u.role));\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 14\n        }\n      }, \"Error retrieving books: \", this.state.errorMessage);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/components/getUser.tsx"],"names":["React","getAllUsers","getUser","Component","constructor","props","clearError","setState","isError","errorMessage","state","members","componentDidMount","e","message","render","map","u","id","username","password","firstname","lastname","email","role"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,WAAT,QAA4B,sBAA5B;AASA,OAAO,MAAMC,OAAN,SAAsBF,KAAK,CAACG,SAA5B,CAA+D;AAEpEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SAwBxBC,UAxBwB,GAwBX,MAAM;AACjB,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KA7BuB;;AAEtB,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXH,MAAAA,OAAO,EAAE,KAFE;AAGXC,MAAAA,YAAY,EAAE;AAHH,KAAb;AAKD;;AAED,QAAMG,iBAAN,GAA0B;AACxB,QAAI;AACF,WAAKL,QAAL,CAAc;AACZI,QAAAA,OAAO,EAAE,MAAMV,WAAW;AADd,OAAd;AAGD,KAJD,CAIE,OAAOY,CAAP,EAAU;AACV;AACA;AACA,WAAKN,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,IADG;AAEZC,QAAAA,YAAY,EAAEI,CAAC,CAACC;AAFJ,OAAd;AAID;AACF;;AASDC,EAAAA,MAAM,GAAG;AACP,QAAG,CAAC,KAAKL,KAAL,CAAWF,OAAf,EAAwB;AACtB;AACA,aAAO,KAAKE,KAAL,CAAWC,OAAX,CAAmBK,GAAnB,CAAwBC,CAAD,IAAU;AACzC,4BACK;AAAK,UAAA,GAAG,EAAEA,CAAC,CAACC,EAAZ;AAAgB,UAAA,SAAS,EAAC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAgBD,CAAC,CAACC,EAAlB,CADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkBD,CAAC,CAACE,QAApB,CAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkBF,CAAC,CAACG,QAApB,CAHA,eAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkBH,CAAC,CAACI,SAApB,CAJA,eAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAiBJ,CAAC,CAACK,QAAnB,CALA,eAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAcL,CAAC,CAACM,KAAhB,CANA,eAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAaN,CAAC,CAACO,IAAf,CAPA,CADL;AAWK,OAZG,CAAP;AAaD,KAfD,MAgBC;AACC,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAA6B,KAAKd,KAAL,CAAWD,YAAxC,CAAP;AACD;AACF;;AArDmE","sourcesContent":["import React from 'react';\nimport { User } from '../models/User';\nimport { getAllUsers } from '../api/LibraryClient';\nimport { QuickTable } from './QuickTable';\n\ninterface IBooksDisplayState {\n  members: User[];\n  isError: boolean;\n  errorMessage: string;\n}\n\nexport class getUser extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: '',\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await getAllUsers()\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message,\n      })\n    }\n  }\n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n  render() {\n    if(!this.state.isError) {\n      //map to a string so quicktable can render this.\n      return this.state.members.map((u:User)=>{\n     return(\n          <div key={u.id} className=\"col\">\n          <span>userid:  {u.id}</span>  \n          <span>username:  {u.username}</span>  \n          <span>password:  {u.password}</span>  \n          <span>firstname: {u.firstname}</span>  \n          <span>lastname: {u.lastname}</span>  \n          <span>email: {u.email}</span>  \n          <span>role: {u.role}</span>  \n          </div>\n         )      \n         })\n    } \nelse {\n      return <h3>Error retrieving books: {this.state.errorMessage}</h3>\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}