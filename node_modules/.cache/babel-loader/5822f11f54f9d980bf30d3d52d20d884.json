{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/react1/myapp/src/components/ClickerCounter.tsx\";\nimport React from 'react'; // any, any removes our static typing from props and state\n\nexport class ClickerCounter extends React.Component {\n  // When we use state, we need a constructor in our class component\n  // We'll ALWAYS pass in props to that constructor and ALWAYS\n  // have the first line of the constructor be super(props);\n  constructor(props) {\n    super(props); // Inside the constructor we set this.state\n    // Inside the constructor is THE ONLY TIME we ever set this.state directly\n    // state is used for anything your component should remember, and we use it\n    // whenever components evolve throughout time.\n\n    this.addOneClick = () => {\n      // Whenever we modify state, we use this.setState()\n      // We can pass setState an object that's used to update the state:\n      // Sometimes we'll \"lose a click\" with this setup.  We'll discuss\n      // why that is later when we talk about component lifecycles.\n      // We can fix the problem by passing a function that tells React how\n      // to update the state\n      this.setState({\n        clickCount: this.state.clickCount + 1\n      });\n    };\n\n    this.state = {\n      clickCount: 0\n    };\n  } // We're going to declare functions in our class components using arrow notation\n  // this avoids some tricky behaviour with 'this' in JS.\n  // 'this' in addOneClick will refer to the component\n\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // JSX attributes are slightly different from HTML attributes\n      React.createElement(\"div\", {\n        className: \"click-counter\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }\n      }, \"Current click count: \", this.state.clickCount), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.addOneClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }\n      }, \"Click Me\"))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/components/ClickerCounter.tsx"],"names":["React","ClickerCounter","Component","constructor","props","addOneClick","setState","clickCount","state","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,cAAN,SAA6BD,KAAK,CAACE,SAAnC,CAAuD;AAE5D;AACA;AACA;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN,EADsB,CAEtB;AACA;AACA;AACA;;AALsB,SAcxBC,WAdwB,GAcV,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,WAAKC,QAAL,CAAc;AAACC,QAAAA,UAAU,EAAG,KAAKC,KAAL,CAAWD,UAAX,GAAwB;AAAtC,OAAd;AACD,KAtBuB;;AAMtB,SAAKC,KAAL,GAAa;AACXD,MAAAA,UAAU,EAAE;AADD,KAAb;AAGD,GAd2D,CAgB5D;AACA;AACA;;;AAWAE,EAAAA,MAAM,GAAG;AACP;AAAA;AACA;AACA;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAyB,KAAKD,KAAL,CAAWD,UAApC,CADF,eAEE;AAAQ,QAAA,OAAO,EAAE,KAAKF,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAFA;AAOD;;AArC2D","sourcesContent":["import React from 'react';\n\n// any, any removes our static typing from props and state\nexport class ClickerCounter extends React.Component<any, any> {\n\n  // When we use state, we need a constructor in our class component\n  // We'll ALWAYS pass in props to that constructor and ALWAYS\n  // have the first line of the constructor be super(props);\n  constructor(props: any) {\n    super(props);\n    // Inside the constructor we set this.state\n    // Inside the constructor is THE ONLY TIME we ever set this.state directly\n    // state is used for anything your component should remember, and we use it\n    // whenever components evolve throughout time.\n    this.state = {\n      clickCount: 0\n    }\n  }\n\n  // We're going to declare functions in our class components using arrow notation\n  // this avoids some tricky behaviour with 'this' in JS.\n  // 'this' in addOneClick will refer to the component\n  addOneClick = () => {\n    // Whenever we modify state, we use this.setState()\n    // We can pass setState an object that's used to update the state:\n    // Sometimes we'll \"lose a click\" with this setup.  We'll discuss\n    // why that is later when we talk about component lifecycles.\n    // We can fix the problem by passing a function that tells React how\n    // to update the state\n    this.setState({clickCount : this.state.clickCount + 1});\n  }\n\n  render() {\n    return (\n    // JSX attributes are slightly different from HTML attributes\n    <div className=\"click-counter\">\n      <p>Current click count: {this.state.clickCount}</p>\n      <button onClick={this.addOneClick}>Click Me</button>\n    </div>\n    );\n  }\n  \n}"]},"metadata":{},"sourceType":"module"}