{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/react1/myapp/src/components/emp/SingleUser.tsx\";\nimport React from 'react';\nimport { getSingle } from '../../api/LibraryClient';\nimport { Err1, ErrS } from '../../errors/error1';\nimport { Eview } from './view';\nexport class SingleUser extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.normal = () => {\n      try {\n        this.setState({\n          single: getSingle(this.props.userid),\n          isError: false\n        });\n      } catch (e) {\n        // We set the error information in our state.\n        // This will let us render something about the error to the end user\n        this.setState({\n          isError: true,\n          errorMessage: e.message\n        }); // }\n      }\n    };\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      single: 'fetching user by id',\n      isError: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidUpdate() {\n    try {\n      this.setState({\n        single: await getSingle(this.props.userid),\n        isError: false\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message\n      }); // }\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('click', this.normal, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.normal, false);\n  }\n\n  render() {\n    const u = this.state.single;\n\n    if (typeof u === \"string\") {\n      return /*#__PURE__*/React.createElement(ErrS, {\n        data: u,\n        err: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 14\n        }\n      });\n    }\n\n    if (this.state.isError) {\n      return /*#__PURE__*/React.createElement(Err1, {\n        err: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 10\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Eview, {\n        access: u.id,\n        id: u.id,\n        username: u.username,\n        pass: u.password,\n        firstname: u.firstname,\n        lastname: u.lastname,\n        email: u.email,\n        role: u.role,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 6\n        }\n      }));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/components/emp/SingleUser.tsx"],"names":["React","getSingle","Err1","ErrS","Eview","SingleUser","Component","constructor","props","normal","setState","single","userid","isError","e","errorMessage","message","clearError","state","componentDidUpdate","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","render","u","id","username","password","firstname","lastname","email","role"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getSingle } from '../../api/LibraryClient';\nimport { Err1, ErrS } from '../../errors/error1';\nimport { Eview } from './view';\n\n\ninterface IBooksDisplayState {\n  single: any;\n  isError: boolean;\n  errorMessage: string;\n}\n\nexport class SingleUser extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      single: 'fetching user by id',\n      isError: false,\n      errorMessage: '',\n    }\n  }\n\n  async componentDidUpdate() {\n    try {\n      this.setState({\n        single: await getSingle(this.props.userid),\n        isError: false\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message,\n      })\n    // }\n  }\n  }\n  componentDidMount() {\n    window.addEventListener('click', this.normal, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.normal, false);\n  }\n\n   normal = ()=> {\n    try {\n      this.setState({\n        single: getSingle(this.props.userid),\n        isError: false\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message,\n      })\n    // }\n  }\n  }\n\n\n  \n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n  render() {\n    const u = this.state.single;\n    if(typeof(u) === \"string\"){ \n      return <ErrS data={u} err={this.state.errorMessage} />\n}\n\nif(this.state.isError){\n  return <Err1 err={this.state.errorMessage} />\n\n    }else{\n    return(\n      <>\n     <Eview access={u.id} id={u.id} username={u.username} pass={u.password}\n          firstname={u.firstname} lastname={u.lastname}\n           email={u.email} role={u.role} />\n          </>\n    )\n  }\n    \n  }\n  \n}"]},"metadata":{},"sourceType":"module"}