{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/propject/project-1-mohamedctm/src/components/rem/bystatus.tsx\";\nimport React from 'react';\nimport { sta } from '../../api/LibraryClient';\nimport { Review } from './view1';\nimport { Err2, ErrS } from '../../errors/error1';\nexport class Stat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.normal = () => {\n      try {\n        this.setState({\n          single: sta(this.props.userid),\n          isError: false\n        });\n      } catch (e) {\n        // We set the error information in our state.\n        // This will let us render something about the error to the end user\n        this.setState({\n          single: '',\n          isError: true,\n          errorMessage: e.message\n        }); // }\n      }\n    };\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      single: 'fetching reimbursements by status-- choose a status and hit Fetch',\n      isError: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidMount() {\n    this.setState({\n      single: await sta(this.props.userid),\n      isError: false\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state.single !== nextState.userid;\n  }\n\n  async componentWillReceiveProps() {\n    this.normal();\n    this.normal();\n  }\n\n  render() {\n    const data = this.state.single;\n    console.log(typeof data);\n\n    if (typeof data === \"string\") {\n      return /*#__PURE__*/React.createElement(ErrS, {\n        data: data,\n        err: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 16\n        }\n      });\n    }\n\n    if (this.state.isError) {\n      return /*#__PURE__*/React.createElement(Err2, {\n        err: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 14\n        }\n      });\n    } else {\n      return data.map(u => {\n        return /*#__PURE__*/React.createElement(Review, {\n          id: u.reimbursementId,\n          author: u.author,\n          amount: u.amount,\n          resolver: u.resolver,\n          status: u.status,\n          type: u.type,\n          description: u.description,\n          date1: u.dateSubmitted,\n          date2: u.dateResolved,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }\n        });\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/propject/project-1-mohamedctm/src/components/rem/bystatus.tsx"],"names":["React","sta","Review","Err2","ErrS","Stat","Component","constructor","props","normal","setState","single","userid","isError","e","errorMessage","message","clearError","state","componentDidMount","shouldComponentUpdate","nextProps","nextState","componentWillReceiveProps","render","data","console","log","map","u","reimbursementId","author","amount","resolver","status","type","description","dateSubmitted","dateResolved"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,yBAApB;AAEA,SAASC,MAAT,QAAuB,SAAvB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,qBAA3B;AASA,OAAO,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAA4D;AAEjEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SAmBvBC,MAnBuB,GAmBf,MAAK;AACZ,UAAI;AACF,aAAKC,QAAL,CAAc;AACZC,UAAAA,MAAM,EAAEV,GAAG,CAAC,KAAKO,KAAL,CAAWI,MAAZ,CADC;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAd;AAID,OALD,CAKE,OAAOC,CAAP,EAAU;AACV;AACA;AACA,aAAKJ,QAAL,CAAc;AACZC,UAAAA,MAAM,EAAE,EADI;AAEZE,UAAAA,OAAO,EAAE,IAFG;AAGZE,UAAAA,YAAY,EAAED,CAAC,CAACE;AAHJ,SAAd,EAHU,CAQZ;AACD;AACA,KAnCuB;;AAAA,SA4CxBC,UA5CwB,GA4CX,MAAM;AACjB,WAAKP,QAAL,CAAc;AACZG,QAAAA,OAAO,EAAE,KADG;AAEZE,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KAjDuB;;AAEtB,SAAKG,KAAL,GAAa;AACXP,MAAAA,MAAM,EAAE,mEADG;AAEXE,MAAAA,OAAO,EAAE,KAFE;AAGXE,MAAAA,YAAY,EAAE;AAHH,KAAb;AAKD;;AAED,QAAMI,iBAAN,GAA0B;AACxB,SAAKT,QAAL,CAAc;AACZC,MAAAA,MAAM,EAAE,MAAMV,GAAG,CAAC,KAAKO,KAAL,CAAWI,MAAZ,CADL;AAERC,MAAAA,OAAO,EAAE;AAFD,KAAd;AAIG;;AAELO,EAAAA,qBAAqB,CAACC,SAAD,EAAiBC,SAAjB,EAAiC;AACpD,WAAO,KAAKJ,KAAL,CAAWP,MAAX,KAAsBW,SAAS,CAACV,MAAvC;AACD;;AAmBD,QAAMW,yBAAN,GAAkC;AAChC,SAAKd,MAAL;AACA,SAAKA,MAAL;AACD;;AAaDe,EAAAA,MAAM,GAAG;AAEP,UAAMC,IAAI,GAAG,KAAKP,KAAL,CAAWP,MAAxB;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOF,IAAnB;;AACA,QAAG,OAAOA,IAAP,KAAiB,QAApB,EAA6B;AACzB,0BAAO,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,IAAZ;AAAkB,QAAA,GAAG,EAAE,KAAKP,KAAL,CAAWH,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAGH;;AAED,QAAG,KAAKG,KAAL,CAAWL,OAAd,EAAsB;AACpB,0BAAO,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAE,KAAKK,KAAL,CAAWH,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD,MAEK;AAED,aAAQU,IAAI,CAACG,GAAL,CAAUC,CAAD,IAAwB;AACrC,4BACI,oBAAC,MAAD;AAAQ,UAAA,EAAE,EAAEA,CAAC,CAACC,eAAd;AAA+B,UAAA,MAAM,EAAED,CAAC,CAACE,MAAzC;AAAiD,UAAA,MAAM,EAAEF,CAAC,CAACG,MAA3D;AAAmE,UAAA,QAAQ,EAAEH,CAAC,CAACI,QAA/E;AAAyF,UAAA,MAAM,EAAEJ,CAAC,CAACK,MAAnG;AAA2G,UAAA,IAAI,EAAEL,CAAC,CAACM,IAAnH;AAAyH,UAAA,WAAW,EAAEN,CAAC,CAACO,WAAxI;AAAqJ,UAAA,KAAK,EAAEP,CAAC,CAACQ,aAA9J;AAA6K,UAAA,KAAK,EAAER,CAAC,CAACS,YAAtL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAIX,OALe,CAAR;AAQL;AAEA;;AA/EgE","sourcesContent":["import React from 'react';\nimport { sta } from '../../api/LibraryClient';\nimport { Reimbursement } from '../../models/Reimbursement';\nimport { Review } from './view1';\nimport { Err2, ErrS } from '../../errors/error1';\n\n\ninterface IBooksDisplayState {\n  single: any;\n  isError: boolean;\n  errorMessage: string;\n}\n\nexport class Stat extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      single: 'fetching reimbursements by status-- choose a status and hit Fetch',\n      isError: false,\n      errorMessage: '',\n    }\n  }\n\n  async componentDidMount() {\n    this.setState({\n      single: await sta(this.props.userid),\n          isError: false\n        })\n      }\n\n  shouldComponentUpdate(nextProps: any, nextState: any) {\n    return this.state.single !== nextState.userid;\n  }\n   normal= ()=> {\n    try {\n      this.setState({\n        single: sta(this.props.userid),\n        isError: false\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        single: '',\n        isError: true,\n        errorMessage: e.message,\n      })\n    // }\n  }\n  }\n\n  async componentWillReceiveProps() {\n    this.normal();\n    this.normal();\n  }\n\n  \n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n\n\n  render() {\n\n    const data = this.state.single;\n    console.log(typeof(data));\n    if(typeof(data) === \"string\"){ \n        return <ErrS data={data} err={this.state.errorMessage}/>\n\n\n    }\n\n    if(this.state.isError){\n      return <Err2 err={this.state.errorMessage}/>\n    }else{\n\n        return (data.map((u:Reimbursement|any) =>{\n            return(\n                <Review id={u.reimbursementId} author={u.author} amount={u.amount} resolver={u.resolver} status={u.status} type={u.type} description={u.description} date1={u.dateSubmitted} date2={u.dateResolved} />\n\n)      \n})\n\n        )\n  }\n    \n  }\n  \n}"]},"metadata":{},"sourceType":"module"}