{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/react1/myapp/src/components/getUser.tsx\";\nimport React from 'react';\nimport { getAllUsers } from '../api/LibraryClient';\nimport { QuickTable } from './QuickTable';\nexport class getUsers extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await getAllUsers()\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.isError) {\n      //map to a string so quicktable can render this.\n      return /*#__PURE__*/React.createElement(QuickTable, {\n        rows: this.state.members.map(b => {\n          return `${b.title} by ${b.author} in ${b.yearPublished}`;\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 14\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 14\n        }\n      }, \"Error retrieving books: \", this.state.errorMessage);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/components/getUser.tsx"],"names":["React","getAllUsers","QuickTable","getUsers","Component","constructor","props","clearError","setState","isError","errorMessage","state","members","componentDidMount","e","message","render","map","b","title","author","yearPublished"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAQA,OAAO,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAgE;AAErEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SAwBxBC,UAxBwB,GAwBX,MAAM;AACjB,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KA7BuB;;AAEtB,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXH,MAAAA,OAAO,EAAE,KAFE;AAGXC,MAAAA,YAAY,EAAE;AAHH,KAAb;AAKD;;AAED,QAAMG,iBAAN,GAA0B;AACxB,QAAI;AACF,WAAKL,QAAL,CAAc;AACZI,QAAAA,OAAO,EAAE,MAAMX,WAAW;AADd,OAAd;AAGD,KAJD,CAIE,OAAOa,CAAP,EAAU;AACV;AACA;AACA,WAAKN,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,IADG;AAEZC,QAAAA,YAAY,EAAEI,CAAC,CAACC;AAFJ,OAAd;AAID;AACF;;AASDC,EAAAA,MAAM,GAAG;AACP,QAAG,CAAC,KAAKL,KAAL,CAAWF,OAAf,EAAwB;AACtB;AACA,0BAAO,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAE,KAAKE,KAAL,CAAWC,OAAX,CAAmBK,GAAnB,CAAwBC,CAAD,IAAU;AAAC,iBAAQ,GAAEA,CAAC,CAACC,KAAM,OAAMD,CAAC,CAACE,MAAO,OAAMF,CAAC,CAACG,aAAc,EAAvD;AAAyD,SAA3F,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAHD,MAGO;AACL,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAA6B,KAAKV,KAAL,CAAWD,YAAxC,CAAP;AACD;AACF;;AAxCoE","sourcesContent":["import React from 'react';\nimport { User } from '../models/User';\nimport { getAllUsers } from '../api/LibraryClient';\nimport { QuickTable } from './QuickTable';\n\ninterface IBooksDisplayState {\n  members: User[];\n  isError: boolean;\n  errorMessage: string;\n}\n\nexport class getUsers extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: '',\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await getAllUsers()\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message,\n      })\n    }\n  }\n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n  render() {\n    if(!this.state.isError) {\n      //map to a string so quicktable can render this.\n      return <QuickTable rows={this.state.members.map((b:User)=>{return `${b.title} by ${b.author} in ${b.yearPublished}`})} />\n    } else {\n      return <h3>Error retrieving books: {this.state.errorMessage}</h3>\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}