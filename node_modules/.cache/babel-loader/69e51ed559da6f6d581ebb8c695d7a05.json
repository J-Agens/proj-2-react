{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/react1/myapp/src/components/getUser.tsx\";\nimport React from 'react';\nimport { getAllUsers } from '../api/LibraryClient'; // import { QuickTable } from './QuickTable';\n\nexport class getUser extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      members: [],\n      mes: '',\n      isError: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        mes: await getAllUsers()\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.isError) {\n      return this.state.members; //map to a string so quicktable can render this.\n      //   return this.state.members.map((u:User)=>{\n      //  return(\n      //       <div key={u.id} className=\"col\">\n      //       <span>userid:  {u.id}</span>  \n      //       <span>username:  {u.username}</span>  \n      //       <span>password:  {u.password}</span>  \n      //       <span>firstname: {u.firstname}</span>  \n      //       <span>lastname: {u.lastname}</span>  \n      //       <span>email: {u.email}</span>  \n      //       <span>role: {u.role}</span>  \n      //       </div>\n      //      )      \n      //      })\n    } else {\n      return /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 14\n        }\n      }, \"Error from getUser: \", this.state.errorMessage);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/components/getUser.tsx"],"names":["React","getAllUsers","getUser","Component","constructor","props","clearError","setState","isError","errorMessage","state","members","mes","componentDidMount","e","message","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,WAAT,QAA4B,sBAA5B,C,CACA;;AASA,OAAO,MAAMC,OAAN,SAAsBF,KAAK,CAACG,SAA5B,CAA+D;AAEpEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SAyBxBC,UAzBwB,GAyBX,MAAM;AACjB,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KA9BuB;;AAEtB,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXC,MAAAA,GAAG,EAAE,EAFM;AAGXJ,MAAAA,OAAO,EAAE,KAHE;AAIXC,MAAAA,YAAY,EAAE;AAJH,KAAb;AAMD;;AAED,QAAMI,iBAAN,GAA0B;AACxB,QAAI;AACF,WAAKN,QAAL,CAAc;AACZK,QAAAA,GAAG,EAAE,MAAMX,WAAW;AADV,OAAd;AAGD,KAJD,CAIE,OAAOa,CAAP,EAAU;AACV;AACA;AACA,WAAKP,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,IADG;AAEZC,QAAAA,YAAY,EAAEK,CAAC,CAACC;AAFJ,OAAd;AAID;AACF;;AASDC,EAAAA,MAAM,GAAG;AACP,QAAG,CAAC,KAAKN,KAAL,CAAWF,OAAf,EAAwB;AACpB,aAAO,KAAKE,KAAL,CAAWC,OAAlB,CADoB,CAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,KAhBD,MAiBC;AACC,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAyB,KAAKD,KAAL,CAAWD,YAApC,CAAP;AACD;AACF;;AAvDmE","sourcesContent":["import React from 'react';\nimport { User } from '../models/User';\nimport { getAllUsers } from '../api/LibraryClient';\n// import { QuickTable } from './QuickTable';\n\ninterface IBooksDisplayState {\n  members: User[];\n  mes: string,\n  isError: boolean;\n  errorMessage: string;\n}\n\nexport class getUser extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      members: [],\n      mes: '',\n      isError: false,\n      errorMessage: '',\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        mes: await getAllUsers()\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message,\n      })\n    }\n  }\n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n  render() {\n    if(!this.state.isError) {\n        return this.state.members;\n      //map to a string so quicktable can render this.\n    //   return this.state.members.map((u:User)=>{\n    //  return(\n    //       <div key={u.id} className=\"col\">\n    //       <span>userid:  {u.id}</span>  \n    //       <span>username:  {u.username}</span>  \n    //       <span>password:  {u.password}</span>  \n    //       <span>firstname: {u.firstname}</span>  \n    //       <span>lastname: {u.lastname}</span>  \n    //       <span>email: {u.email}</span>  \n    //       <span>role: {u.role}</span>  \n    //       </div>\n    //      )      \n    //      })\n    } \nelse {\n      return <h3>Error from getUser: {this.state.errorMessage}</h3>\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}