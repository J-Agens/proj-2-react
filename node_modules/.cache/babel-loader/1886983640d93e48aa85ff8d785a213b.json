{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/Desktop/project-2-react/src/components/posts/PosAll.tsx\";\nimport React from 'react';\nimport { FetchingAllPosts } from '../../api/LibraryClient';\nimport { Review } from './view1';\nimport { Err1 } from '../../errors/error1'; // import { QuickTable } from './QuickTable';\n\nexport class All extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await FetchingAllPosts()\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        isError: true,\n        errorMessage: e.message\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.isError) {\n      //map to a string so quicktable can render this.\n      return this.state.members.map((u, x) => {\n        return /*#__PURE__*/React.createElement(Review, {\n          key: x,\n          thekey: x,\n          current: this.props.current,\n          id: u.postId,\n          author: u.author,\n          postTitle: u.postTitle,\n          resolver: u.resolver,\n          status: u.status,\n          type: u.postType,\n          postText: u.postText,\n          date1: u.dateSubmitted,\n          date2: u.datePublished,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 7\n          }\n        });\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(Err1, {\n        err: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 12\n        }\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/Desktop/project-2-react/src/components/posts/PosAll.tsx"],"names":["React","FetchingAllPosts","Review","Err1","All","Component","constructor","props","clearError","setState","isError","errorMessage","state","members","componentDidMount","e","message","render","map","u","x","current","postId","author","postTitle","resolver","status","postType","postText","dateSubmitted","datePublished"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,SAASC,MAAT,QAAuB,SAAvB;AACA,SAASC,IAAT,QAAqB,qBAArB,C,CACA;;AAQA,OAAO,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAA2D;AAEhEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SAyBxBC,UAzBwB,GAyBX,MAAM;AACjB,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KA9BuB;;AAEtB,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXH,MAAAA,OAAO,EAAE,KAFE;AAGXC,MAAAA,YAAY,EAAE;AAHH,KAAb;AAKD;;AAED,QAAMG,iBAAN,GAA0B;AACxB,QAAI;AACF,WAAKL,QAAL,CAAc;AACZI,QAAAA,OAAO,EAAE,MAAMZ,gBAAgB;AADnB,OAAd;AAGD,KAJD,CAIE,OAAOc,CAAP,EAAU;AACV;AACA;AACA,WAAKN,QAAL,CAAc;AAEZC,QAAAA,OAAO,EAAE,IAFG;AAGZC,QAAAA,YAAY,EAAEI,CAAC,CAACC;AAHJ,OAAd;AAKD;AACF;;AASDC,EAAAA,MAAM,GAAG;AAEP,QAAG,CAAC,KAAKL,KAAL,CAAWF,OAAf,EAAwB;AACtB;AAEA,aAAO,KAAKE,KAAL,CAAWC,OAAX,CAAmBK,GAAnB,CAAuB,CAACC,CAAD,EAAQC,CAAR,KAAmB;AAClD,4BACC,oBAAC,MAAD;AAAQ,UAAA,GAAG,EAAEA,CAAb;AAAgB,UAAA,MAAM,EAAEA,CAAxB;AAA2B,UAAA,OAAO,EAAE,KAAKb,KAAL,CAAWc,OAA/C;AAAwD,UAAA,EAAE,EAAEF,CAAC,CAACG,MAA9D;AAAsE,UAAA,MAAM,EAAEH,CAAC,CAACI,MAAhF;AAAwF,UAAA,SAAS,EAAEJ,CAAC,CAACK,SAArG;AAAgH,UAAA,QAAQ,EAAEL,CAAC,CAACM,QAA5H;AAAsI,UAAA,MAAM,EAAEN,CAAC,CAACO,MAAhJ;AAAwJ,UAAA,IAAI,EAAEP,CAAC,CAACQ,QAAhK;AAA0K,UAAA,QAAQ,EAAER,CAAC,CAACS,QAAtL;AAAgM,UAAA,KAAK,EAAET,CAAC,CAACU,aAAzM;AAAwN,UAAA,KAAK,EAAEV,CAAC,CAACW,aAAjO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAIK,OALG,CAAP;AAMD,KATD,MAUC;AACD,0BAAO,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAE,KAAKlB,KAAL,CAAWD,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAEC;AAEF;;AAnD+D","sourcesContent":["import React from 'react';\nimport { Post } from '../../model/Post';\nimport { FetchingAllPosts } from '../../api/LibraryClient';\nimport { Review } from './view1';\nimport { Err1 } from '../../errors/error1';\n// import { QuickTable } from './QuickTable';\n\ninterface IBooksDisplayState {\n  members: Post[];\n  isError: boolean;\n  errorMessage: string;\n}\n\nexport class All extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      members: [],\n      isError: false,\n      errorMessage: '',\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        members: await FetchingAllPosts()\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        \n        isError: true,\n        errorMessage: e.message,\n      })\n    }\n  }\n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n  render() {\n      \n    if(!this.state.isError) {\n      //map to a string so quicktable can render this.\n      \n      return this.state.members.map((u:Post,x:number)=>{\n     return(\n      <Review key={x} thekey={x} current={this.props.current} id={u.postId} author={u.author} postTitle={u.postTitle} resolver={u.resolver} status={u.status} type={u.postType} postText={u.postText} date1={u.dateSubmitted} date2={u.datePublished} />\n\n         )      \n         })\n    } \nelse { \n    return <Err1 err={this.state.errorMessage} />\n        \n    }\n    \n  }\n  \n}"]},"metadata":{},"sourceType":"module"}