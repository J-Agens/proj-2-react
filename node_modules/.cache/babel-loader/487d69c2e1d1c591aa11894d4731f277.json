{"ast":null,"code":"import axios from 'axios';\nimport { Book } from '../models/Book';\nimport { User } from '../models/User';\nimport { FailedLoginError } from '../errors/FailedLoginError'; // For project work, take note that axios interprets non-200s responses statuses as errors.\n// This means you can handle auth problems using try-catch.\n//We can create a client with config for convenience, then call our methods\n// on that client instead of on axios directly.  This lets up set up configuration\n// without repeating ourselves\n\nconst libraryClient = axios.create({\n  baseURL: 'http://100.25.132.252:3000',\n  // If you don't have the following line, your login won't work!\n  withCredentials: true\n}); //Library-express is running on my EC2 with public IP 18.232.125.207\n\nexport async function getAllBooks() {\n  const response = await libraryClient.get('/users');\n  return response.data.map(bookObj => {\n    const {\n      id,\n      title,\n      author,\n      yearPublished,\n      wordCount\n    } = bookObj;\n    return new Book(id, title, author, yearPublished, wordCount);\n  });\n}\nexport async function getAllUsers() {\n  const response = await libraryClient.get('/users');\n  return response.data.map(userObj => {\n    const {\n      id,\n      username,\n      password,\n      email,\n      role\n    } = userObj;\n    return new User(id, username, password, email, role);\n  });\n}\nexport async function login(un, pw) {\n  try {\n    const response = await libraryClient.post('/login', {\n      username: un,\n      password: pw\n    });\n    const {\n      id,\n      username,\n      password,\n      email,\n      role\n    } = response.data;\n    return new User(id, username, password, email, role);\n  } catch (e) {\n    if (e.response.status === 401) {\n      throw new FailedLoginError('Failed to authenticate', un);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw e;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/api/LibraryClient.tsx"],"names":["axios","Book","User","FailedLoginError","libraryClient","create","baseURL","withCredentials","getAllBooks","response","get","data","map","bookObj","id","title","author","yearPublished","wordCount","getAllUsers","userObj","username","password","email","role","login","un","pw","post","e","status"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,gBAAT,QAAiC,4BAAjC,C,CAEA;AACA;AAEA;AACA;AACA;;AACA,MAAMC,aAAa,GAAGJ,KAAK,CAACK,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAE,4BADwB;AAEjC;AACAC,EAAAA,eAAe,EAAE;AAHgB,CAAb,CAAtB,C,CAMA;;AACA,OAAO,eAAeC,WAAf,GAA+C;AACpD,QAAMC,QAAQ,GAAG,MAAML,aAAa,CAACM,GAAd,CAAkB,QAAlB,CAAvB;AACA,SAAOD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAmBC,OAAD,IAAkB;AACzC,UAAM;AAACC,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAYC,MAAAA,MAAZ;AAAoBC,MAAAA,aAApB;AAAmCC,MAAAA;AAAnC,QAAgDL,OAAtD;AACA,WAAO,IAAIZ,IAAJ,CAASa,EAAT,EAAaC,KAAb,EAAoBC,MAApB,EAA4BC,aAA5B,EAA2CC,SAA3C,CAAP;AACD,GAHM,CAAP;AAID;AAED,OAAO,eAAeC,WAAf,GAA+C;AACpD,QAAMV,QAAQ,GAAG,MAAML,aAAa,CAACM,GAAd,CAAkB,QAAlB,CAAvB;AACA,SAAOD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAmBQ,OAAD,IAAkB;AACzC,UAAM;AAACN,MAAAA,EAAD;AAAKO,MAAAA,QAAL;AAAeC,MAAAA,QAAf;AAAyBC,MAAAA,KAAzB;AAAgCC,MAAAA;AAAhC,QAAwCJ,OAA9C;AACA,WAAO,IAAIlB,IAAJ,CAASY,EAAT,EAAaO,QAAb,EAAuBC,QAAvB,EAAiCC,KAAjC,EAAwCC,IAAxC,CAAP;AACD,GAHM,CAAP;AAID;AAED,OAAO,eAAeC,KAAf,CAAqBC,EAArB,EAAiCC,EAAjC,EAA4D;AACjE,MAAI;AACF,UAAMlB,QAAQ,GAAG,MAAML,aAAa,CAACwB,IAAd,CAAmB,QAAnB,EAA6B;AAACP,MAAAA,QAAQ,EAAEK,EAAX;AAAeJ,MAAAA,QAAQ,EAAEK;AAAzB,KAA7B,CAAvB;AACA,UAAM;AAACb,MAAAA,EAAD;AAAKO,MAAAA,QAAL;AAAeC,MAAAA,QAAf;AAAyBC,MAAAA,KAAzB;AAAgCC,MAAAA;AAAhC,QAAwCf,QAAQ,CAACE,IAAvD;AACA,WAAO,IAAIT,IAAJ,CAASY,EAAT,EAAaO,QAAb,EAAuBC,QAAvB,EAAiCC,KAAjC,EAAwCC,IAAxC,CAAP;AACD,GAJD,CAIE,OAAOK,CAAP,EAAU;AACV,QAAGA,CAAC,CAACpB,QAAF,CAAWqB,MAAX,KAAsB,GAAzB,EAA8B;AAC5B,YAAM,IAAI3B,gBAAJ,CAAqB,wBAArB,EAA+CuB,EAA/C,CAAN;AACD,KAFD,MAEO;AACL;AACA,YAAMG,CAAN;AACD;AACF;AAEF","sourcesContent":["import axios from 'axios';\nimport { Book } from '../models/Book';\nimport { User } from '../models/User';\nimport { FailedLoginError } from '../errors/FailedLoginError';\n\n// For project work, take note that axios interprets non-200s responses statuses as errors.\n// This means you can handle auth problems using try-catch.\n\n//We can create a client with config for convenience, then call our methods\n// on that client instead of on axios directly.  This lets up set up configuration\n// without repeating ourselves\nconst libraryClient = axios.create({\n  baseURL: 'http://100.25.132.252:3000',\n  // If you don't have the following line, your login won't work!\n  withCredentials: true,\n});\n\n//Library-express is running on my EC2 with public IP 18.232.125.207\nexport async function getAllBooks() : Promise<Book[]> {\n  const response = await libraryClient.get('/users');\n  return response.data.map((bookObj: any) => {\n    const {id, title, author, yearPublished, wordCount} = bookObj;\n    return new Book(id, title, author, yearPublished, wordCount);\n  })\n}\n\nexport async function getAllUsers() : Promise<User[]> {\n  const response = await libraryClient.get('/users');\n  return response.data.map((userObj: any) => {\n    const {id, username, password, email, role} = userObj;\n    return new User(id, username, password, email, role);\n  });\n}\n\nexport async function login(un: string, pw: string): Promise<User> {\n  try {\n    const response = await libraryClient.post('/login', {username: un, password: pw});\n    const {id, username, password, email, role} = response.data;\n    return new User(id, username, password, email, role);\n  } catch (e) {\n    if(e.response.status === 401) {\n      throw new FailedLoginError('Failed to authenticate', un);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw e;\n    }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module"}