{"ast":null,"code":"import React from 'react'; // import { sta } from '../../api/LibraryClient';\n\nexport class Stat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      single: 'fetching reimbursements by status-- choose a status and hit Fetch',\n      isError: false,\n      errorMessage: '',\n      singlee: this.props.singlee\n    };\n  }\n\n  async componentWillUnmount() {\n    this.setState({\n      single: false,\n      isError: false\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.singlee !== nextState.singlee;\n  }\n\n  async componentDidUpdate() {\n    try {\n      this.setState({\n        single: this.props.singlee,\n        isError: false\n      });\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        single: '',\n        isError: true,\n        errorMessage: e.message\n      }); // }\n    }\n  }\n\n  render() {\n    const data = this.state.singlee;\n    return JSON.stringify(data) // data.map((u:Reimbursement|any) =>{\n    //             return(\n    //                 <Review id={u.reimbursementId} author={u.author} amount={u.amount} resolver={u.resolver} status={u.status} type={u.type} description={u.description} date1={u.dateSubmitted} date2={u.dateResolved} />\n    // )      \n    // })\n    ;\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/propject/project-1-mohamedctm/src/components/rem/bystatus.tsx"],"names":["React","Stat","Component","constructor","props","clearError","setState","isError","errorMessage","state","single","singlee","componentWillUnmount","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","e","message","render","data","JSON","stringify"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAaA,OAAO,MAAMC,IAAN,SAAmBD,KAAK,CAACE,SAAzB,CAA4D;AAEjEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SA0CxBC,UA1CwB,GA0CX,MAAM;AACjB,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KA/CuB;;AAEtB,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,mEADG;AAEXH,MAAAA,OAAO,EAAE,KAFE;AAGXC,MAAAA,YAAY,EAAE,EAHH;AAIXG,MAAAA,OAAO,EAAC,KAAKP,KAAL,CAAWO;AAJR,KAAb;AAMD;;AAED,QAAMC,oBAAN,GAA6B;AAC3B,SAAKN,QAAL,CAAc;AACZI,MAAAA,MAAM,EAAE,KADI;AAERH,MAAAA,OAAO,EAAE;AAFD,KAAd;AAIG;;AAELM,EAAAA,qBAAqB,CAACC,SAAD,EAAiBC,SAAjB,EAAiC;AACpD,WAAO,KAAKX,KAAL,CAAWO,OAAX,KAAuBI,SAAS,CAACJ,OAAxC;AACD;;AAED,QAAMK,kBAAN,GAA2B;AACzB,QAAI;AAEF,WAAKV,QAAL,CAAc;AACZI,QAAAA,MAAM,EAAE,KAAKN,KAAL,CAAWO,OADP;AAEZJ,QAAAA,OAAO,EAAE;AAFG,OAAd;AAID,KAND,CAME,OAAOU,CAAP,EAAU;AACV;AACA;AACA,WAAKX,QAAL,CAAc;AACZI,QAAAA,MAAM,EAAE,EADI;AAEZH,QAAAA,OAAO,EAAE,IAFG;AAGZC,QAAAA,YAAY,EAAES,CAAC,CAACC;AAHJ,OAAd,EAHU,CAQZ;AACD;AACA;;AAaDC,EAAAA,MAAM,GAAG;AAEP,UAAMC,IAAI,GAAG,KAAKX,KAAL,CAAWE,OAAxB;AAEI,WAEEU,IAAI,CAACC,SAAL,CAAeF,IAAf,CAFF,CAGN;AACF;AACA;AACA;AACA;AAPQ;AAUL;;AAnEgE","sourcesContent":["import React from 'react';\n// import { sta } from '../../api/LibraryClient';\nimport { Reimbursement } from '../../models/Reimbursement';\nimport { Review } from './view1';\nimport { Err2, ErrS } from '../../errors/error1';\n\n\ninterface IBooksDisplayState {\n  single: any;\n  isError: boolean;\n  errorMessage: string;\n  singlee:Reimbursement[]|any;\n}\n\nexport class Stat extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      single: 'fetching reimbursements by status-- choose a status and hit Fetch',\n      isError: false,\n      errorMessage: '',\n      singlee:this.props.singlee,\n    }\n  }\n\n  async componentWillUnmount() {\n    this.setState({\n      single: false,\n          isError: false\n        })\n      }\n\n  shouldComponentUpdate(nextProps: any, nextState: any) {\n    return this.props.singlee !== nextState.singlee;\n  }\n\n  async componentDidUpdate() {\n    try {\n\n      this.setState({\n        single: this.props.singlee,\n        isError: false\n      })\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        single: '',\n        isError: true,\n        errorMessage: e.message,\n      })\n    // }\n  }\n  }\n\n  \n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n\n\n  render() {\n\n    const data = this.state.singlee;\n\n        return (\n\n          JSON.stringify(data)\n  // data.map((u:Reimbursement|any) =>{\n//             return(\n//                 <Review id={u.reimbursementId} author={u.author} amount={u.amount} resolver={u.resolver} status={u.status} type={u.type} description={u.description} date1={u.dateSubmitted} date2={u.dateResolved} />\n// )      \n// })\n\n        )\n  }\n  \n}"]},"metadata":{},"sourceType":"module"}