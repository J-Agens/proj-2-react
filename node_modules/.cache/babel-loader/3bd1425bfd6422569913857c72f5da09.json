{"ast":null,"code":"var _jsxFileName = \"/Users/Shadow/react1/myapp/src/components/SingleUser.tsx\";\nimport React from 'react';\nimport { getSingle } from '../api/LibraryClient';\nexport class SingleUser extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearError = () => {\n      this.setState({\n        isError: false,\n        errorMessage: ''\n      });\n    };\n\n    this.state = {\n      single: 'fetching user by id',\n      isError: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidUpdate() {\n    try {\n      const getit = await getSingle(this.props.userid);\n\n      if (getit) {\n        this.setState({\n          single: getit,\n          isError: false\n        });\n      }\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        single: '',\n        isError: true,\n        errorMessage: e.message\n      }); // }\n    }\n  }\n\n  render() {\n    const data = this.state.single;\n\n    if (this.state.isError) {\n      switch (this.state.errorMessage) {\n        case \"Request failed with status code 402\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 19\n            }\n          }, \"login required\");\n\n        case \"Request failed with status code 403\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 20\n            }\n          }, \"Finance manager role is required!\");\n\n        case \"Request failed with status code 400\":\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 20\n            }\n          }, \"Provide a numeric id only!\");\n\n        default:\n          return /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 14\n            }\n          }, this.state.errorMessage, \" \");\n      }\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"dark\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 6\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"a\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }\n      }, \"background::\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 69\n        }\n      }), JSON.stringify(this.state.single), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n        key: data.id,\n        className: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 1\n        }\n      }, \"userid:  \", data.id), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 1\n        }\n      }, \"username:  \", data.username), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 1\n        }\n      }, \"password:  \", data.password), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 1\n        }\n      }, \"firstname: \", data.firstname), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 1\n        }\n      }, \"lastname: \", data.lastname), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 1\n        }\n      }, \"email: \", data.email), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 1\n        }\n      }, \"role: \", data.role)));\n    } //     const data =  this.state.single;\n    //     if(this.state.isError) {\n    //       return(\n\n\n    {}\n    /* <div key={data.id} className=\"col\">\n    <span>userid:  {data.id}</span>  \n    <span>username:  {data.username}</span>  \n    <span>password:  {data.password}</span>  \n    <span>firstname: {data.firstname}</span>  \n    <span>lastname: {data.lastname}</span>  \n    <span>email: {data.email}</span>  \n    <span>role: {data.role}</span>  \n    </div> */\n    //       )\n    //     } \n    // else {\n    // //map to a string so quicktable can render this. \n    // switch(this.state.errorMessage){\n    //   case \"Request failed with status code 402\":\n    //      return <h3>login required</h3>\n    //   case \"Request failed with status code 403\":\n    //      return  <h3>Finance manager role is required!</h3>\n    //   default :\n    //      return <h3>unknown </h3>\n    // }\n    //     }\n  }\n\n}","map":{"version":3,"sources":["/Users/Shadow/react1/myapp/src/components/SingleUser.tsx"],"names":["React","getSingle","SingleUser","Component","constructor","props","clearError","setState","isError","errorMessage","state","single","componentDidUpdate","getit","userid","e","message","render","data","JSON","stringify","id","username","password","firstname","lastname","email","role"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { User } from '../models/User';\nimport { getSingle } from '../api/LibraryClient';\n\n\ninterface IBooksDisplayState {\n  single: any;\n  isError: boolean;\n  errorMessage: string;\n}\n\nexport class SingleUser extends React.Component<any, IBooksDisplayState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      single: 'fetching user by id',\n      isError: false,\n      errorMessage: '',\n    }\n  }\n\n  async componentDidUpdate() {\n    try {\n      const getit = await getSingle(this.props.userid);\n      if(getit){\n      this.setState({\n        single: getit ,\n        isError: false\n      })\n    }\n    } catch (e) {\n      // We set the error information in our state.\n      // This will let us render something about the error to the end user\n      this.setState({\n        single: '',\n        isError: true,\n        errorMessage: e.message,\n      })\n    // }\n  }\n  }\n\n  \n\n  clearError = () => {\n    this.setState({\n      isError: false,\n      errorMessage: '',\n    });\n  }\n\n\n\n  render() {\n    const data = this.state.single\n\n    if(this.state.isError){\n      switch(this.state.errorMessage){\n        case \"Request failed with status code 402\":\n           return <h3>login required</h3>\n        case \"Request failed with status code 403\":\n           return  <h3>Finance manager role is required!</h3>\n           case \"Request failed with status code 400\":\n           return  <h3>Provide a numeric id only!</h3>\n        default :\n      return <h3>{this.state.errorMessage} </h3>\n      }\n    }else{\n    return(\n      <>\n     <div className=\"dark\"> <span className=\"a\">background::</span> <br />\n     {JSON.stringify(this.state.single)} </div>\n      <div key={data.id} className=\"col\">\n<span>userid:  {data.id}</span>  \n<span>username:  {data.username}</span>  \n<span>password:  {data.password}</span>  \n<span>firstname: {data.firstname}</span>  \n<span>lastname: {data.lastname}</span>  \n<span>email: {data.email}</span>  \n<span>role: {data.role}</span>  \n</div>\n</>\n\n    )\n  }\n//     const data =  this.state.single;\n\n//     if(this.state.isError) {\n\n//       return(\n{/* <div key={data.id} className=\"col\">\n<span>userid:  {data.id}</span>  \n<span>username:  {data.username}</span>  \n<span>password:  {data.password}</span>  \n<span>firstname: {data.firstname}</span>  \n<span>lastname: {data.lastname}</span>  \n<span>email: {data.email}</span>  \n<span>role: {data.role}</span>  \n</div> */}\n//       )\n      \n//     } \n// else {\n      \n// //map to a string so quicktable can render this. \n// switch(this.state.errorMessage){\n//   case \"Request failed with status code 402\":\n//      return <h3>login required</h3>\n//   case \"Request failed with status code 403\":\n//      return  <h3>Finance manager role is required!</h3>\n//   default :\n//      return <h3>unknown </h3>\n// }\n        \n//     }\n    \n  }\n  \n}"]},"metadata":{},"sourceType":"module"}